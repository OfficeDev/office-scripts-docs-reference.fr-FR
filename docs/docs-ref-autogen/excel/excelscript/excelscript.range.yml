### YamlMime:UniversalReference
items:
  - uid: 'ExcelScript!ExcelScript.Range:interface'
    summary: 'Une plage représente un ensemble constitué d’une ou de plusieurs cellules contiguës comme une cellule, une ligne, une colonne, un bloc de cellules, etc.'
    name: ExcelScript.Range
    fullName: ExcelScript.Range
    langs:
      - typeScript
    type: interface
    package: ExcelScript!
    children:
      - 'ExcelScript!ExcelScript.Range#addConditionalFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#autoFill:member(1)'
      - 'ExcelScript!ExcelScript.Range#calculate:member(1)'
      - 'ExcelScript!ExcelScript.Range#clear:member(1)'
      - 'ExcelScript!ExcelScript.Range#clearAllConditionalFormats:member(1)'
      - 'ExcelScript!ExcelScript.Range#convertDataTypeToText:member(1)'
      - 'ExcelScript!ExcelScript.Range#copyFrom:member(1)'
      - 'ExcelScript!ExcelScript.Range#delete:member(1)'
      - 'ExcelScript!ExcelScript.Range#find:member(1)'
      - 'ExcelScript!ExcelScript.Range#flashFill:member(1)'
      - 'ExcelScript!ExcelScript.Range#getAbsoluteResizedRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getAddress:member(1)'
      - 'ExcelScript!ExcelScript.Range#getAddressLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getBoundingRect:member(1)'
      - 'ExcelScript!ExcelScript.Range#getCell:member(1)'
      - 'ExcelScript!ExcelScript.Range#getCellCount:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumn:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnCount:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnIndex:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnsAfter:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnsBefore:member(1)'
      - 'ExcelScript!ExcelScript.Range#getConditionalFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#getConditionalFormats:member(1)'
      - 'ExcelScript!ExcelScript.Range#getDataValidation:member(1)'
      - 'ExcelScript!ExcelScript.Range#getDirectPrecedents:member(1)'
      - 'ExcelScript!ExcelScript.Range#getEntireColumn:member(1)'
      - 'ExcelScript!ExcelScript.Range#getEntireRow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormula:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulaLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulaR1C1:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulas:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulasLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulasR1C1:member(1)'
      - 'ExcelScript!ExcelScript.Range#getHasSpill:member(1)'
      - 'ExcelScript!ExcelScript.Range#getHeight:member(1)'
      - 'ExcelScript!ExcelScript.Range#getHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#getHyperlink:member(1)'
      - 'ExcelScript!ExcelScript.Range#getImage:member(1)'
      - 'ExcelScript!ExcelScript.Range#getIntersection:member(1)'
      - 'ExcelScript!ExcelScript.Range#getIsEntireColumn:member(1)'
      - 'ExcelScript!ExcelScript.Range#getIsEntireRow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLastCell:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLastColumn:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLastRow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLeft:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLinkedDataTypeState:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates:member(1)'
      - 'ExcelScript!ExcelScript.Range#getMergedAreas:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormatCategories:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormatLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormats:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormatsLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getOffsetRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getPivotTables:member(1)'
      - 'ExcelScript!ExcelScript.Range#getPredefinedCellStyle:member(1)'
      - 'ExcelScript!ExcelScript.Range#getResizedRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowCount:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowIndex:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowsAbove:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowsBelow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSavedAsArray:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSort:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSpecialCells:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSpillingToRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSpillParent:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSurroundingRegion:member(1)'
      - 'ExcelScript!ExcelScript.Range#getTables:member(1)'
      - 'ExcelScript!ExcelScript.Range#getText:member(1)'
      - 'ExcelScript!ExcelScript.Range#getTexts:member(1)'
      - 'ExcelScript!ExcelScript.Range#getTop:member(1)'
      - 'ExcelScript!ExcelScript.Range#getUsedRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getValue:member(1)'
      - 'ExcelScript!ExcelScript.Range#getValues:member(1)'
      - 'ExcelScript!ExcelScript.Range#getValueType:member(1)'
      - 'ExcelScript!ExcelScript.Range#getValueTypes:member(1)'
      - 'ExcelScript!ExcelScript.Range#getVisibleView:member(1)'
      - 'ExcelScript!ExcelScript.Range#getWidth:member(1)'
      - 'ExcelScript!ExcelScript.Range#getWorksheet:member(1)'
      - 'ExcelScript!ExcelScript.Range#group:member(1)'
      - 'ExcelScript!ExcelScript.Range#hideGroupDetails:member(1)'
      - 'ExcelScript!ExcelScript.Range#insert:member(1)'
      - 'ExcelScript!ExcelScript.Range#merge:member(1)'
      - 'ExcelScript!ExcelScript.Range#moveTo:member(1)'
      - 'ExcelScript!ExcelScript.Range#removeDuplicates:member(1)'
      - 'ExcelScript!ExcelScript.Range#replaceAll:member(1)'
      - 'ExcelScript!ExcelScript.Range#select:member(1)'
      - 'ExcelScript!ExcelScript.Range#setColumnHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#setDirty:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormula:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulaLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulaR1C1:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulas:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulasLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulasR1C1:member(1)'
      - 'ExcelScript!ExcelScript.Range#setHyperlink:member(1)'
      - 'ExcelScript!ExcelScript.Range#setNumberFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#setNumberFormatLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#setNumberFormats:member(1)'
      - 'ExcelScript!ExcelScript.Range#setNumberFormatsLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#setPredefinedCellStyle:member(1)'
      - 'ExcelScript!ExcelScript.Range#setRowHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#setValue:member(1)'
      - 'ExcelScript!ExcelScript.Range#setValues:member(1)'
      - 'ExcelScript!ExcelScript.Range#showCard:member(1)'
      - 'ExcelScript!ExcelScript.Range#showGroupDetails:member(1)'
      - 'ExcelScript!ExcelScript.Range#ungroup:member(1)'
      - 'ExcelScript!ExcelScript.Range#unmerge:member(1)'
  - uid: 'ExcelScript!ExcelScript.Range#addConditionalFormat:member(1)'
    summary: Ajoute un nouveau format conditionnel à la collection à la priorité la plus haute.
    name: addConditionalFormat(type)
    fullName: addConditionalFormat(type)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addConditionalFormat(type: ConditionalFormatType): ConditionalFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          /**
           * This sample applies conditional formatting to the currently used range in the worksheet. 
           * The conditional formatting is a green fill for the top 10% of values.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get the used range in the worksheet.
            let range = selectedSheet.getUsedRange();

            // Set the fill color to green for the top 10% of values in the range.
            let conditionalFormat = range.addConditionalFormat(ExcelScript.ConditionalFormatType.topBottom)
            conditionalFormat.getTopBottom().getFormat().getFill().setColor("green");
            conditionalFormat.getTopBottom().setRule({
              rank: 10, // The percentage threshold.
              type: ExcelScript.ConditionalTopBottomCriterionType.topPercent // The type of the top/bottom condition.
            });
          }
          ```
      parameters:
        - id: type
          description: 'Type de mise en forme conditionnelle ajoutée. Pour plus d’informations, voir ExcelScript. ConditionalFormatType.'
          type:
            - 'ExcelScript!ExcelScript.ConditionalFormatType:enum'
  - uid: 'ExcelScript!ExcelScript.Range#autoFill:member(1)'
    summary: Remplit la plage de la plage actuelle jusqu’à la plage de destination à l’aide de la logique de remplissage automatique spécifiée. La plage de destination peut être null ou peut étendre la source à l’horizontale ou à la verticale. Les plages discontinues ne sont pas prises en charge.
    name: 'autoFill(destinationRange, autoFillType)'
    fullName: 'autoFill(destinationRange, autoFillType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        autoFill(
                    destinationRange?: Range | string,
                    autoFillType?: AutoFillType
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: 'La plage de destination à AutoFill. Si la plage de destination est null, les données sont remplies en fonction des cellules environnantes (ce qui est le comportement lorsque vous double-cliquez sur la poignée de remplissage de la plage de l’interface utilisateur).'
          type:
            - 'ExcelScript!ExcelScript.Range#autoFill~0:complex'
        - id: autoFillType
          description: "Type de remplissage automatique. Indique comment la plage de destination doit être remplie, en fonction du contenu de la plage actuelle. La valeur par défaut est «\_FillDefault\_»."
          type:
            - 'ExcelScript!ExcelScript.AutoFillType:enum'
  - uid: 'ExcelScript!ExcelScript.Range#calculate:member(1)'
    summary: Calcule une plage de cellules dans une feuille de calcul.
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#clear:member(1)'
    summary: 'Supprime les valeurs et les propriétés de format, de remplissage, de bordure, etc. de la plage.'
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: ClearApplyTo): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          /**
           * This script removes all the formatting from the selected range.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the selected range.
            let range = workbook.getSelectedRange();

            // Clear all the formatting in that range.
            range.clear(ExcelScript.ClearApplyTo.formats);
          }
          ```
      parameters:
        - id: applyTo
          description: 'Facultatif. Détermine le type d’action de suppression. Pour plus d’informations, voir ExcelScript. ClearApplyTo.'
          type:
            - 'ExcelScript!ExcelScript.ClearApplyTo:enum'
  - uid: 'ExcelScript!ExcelScript.Range#clearAllConditionalFormats:member(1)'
    summary: Efface toutes les mises en forme conditionnelles actives sur la plage spécifiée actuelle.
    name: clearAllConditionalFormats()
    fullName: clearAllConditionalFormats()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearAllConditionalFormats(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#convertDataTypeToText:member(1)'
    summary: Convertit la plage de cellules avec des types de données en texte.
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#copyFrom:member(1)'
    summary: Copie les cellules de données ou de mise en forme à partir de la plage source ou RangeAreas à la plage active. La taille de la plage de destination peut être différente de celle de la plage source ou RangeAreas. La destination est étendue automatiquement si elle est plus petite que la source.
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        copyFrom(
                    sourceRange: Range | RangeAreas | string,
                    copyType?: RangeCopyType,
                    skipBlanks?: boolean,
                    transpose?: boolean
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: 'Plage source ou RangeAreas à partir de laquelle effectuer la copie. Lorsque la RangeAreas source est composée de plusieurs plages, son formulaire doit pouvoir être créé en supprimant des lignes ou des colonnes entières d’une plage rectangulaire.'
          type:
            - 'ExcelScript!ExcelScript.Range#copyFrom~0:complex'
        - id: copyType
          description: "Type de données de cellule ou de mise en forme à copier. La valeur par défaut est «\_All\_»."
          type:
            - 'ExcelScript!ExcelScript.RangeCopyType:enum'
        - id: skipBlanks
          description: True si pour ignorer les cellules vides dans la plage source. La valeur par défaut est False.
          type:
            - boolean
        - id: transpose
          description: True si pour transposer les cellules dans la plage de destination. La valeur par défaut est False.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#delete:member(1)'
    summary: Supprime les cellules associées à la plage.
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shift
          description: 'Indique la façon dont les cellules doivent être décalées. Pour plus d’informations, voir ExcelScript. DeleteShiftDirection.'
          type:
            - 'ExcelScript!ExcelScript.DeleteShiftDirection:enum'
  - uid: 'ExcelScript!ExcelScript.Range#find:member(1)'
    summary: 'Recherche la chaîne donnée basée sur les critères spécifiés. Si la plage active est plus grande qu’une seule cellule, la recherche est limitée à cette plage, sinon la recherche porte sur la totalité de la feuille qui commence après cette cellule. S’il n’y a aucune correspondance, cette fonction renverra un objet null.'
    name: 'find(text, criteria)'
    fullName: 'find(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'find(text: string, criteria: SearchCriteria): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: text
          description: Chaîne à rechercher.
          type:
            - string
        - id: criteria
          description: 'Critères de recherche supplémentaires, y compris le sens de la recherche et si la recherche doit correspondre à la totalité de la cellule ou respecter la casse.'
          type:
            - 'ExcelScript!ExcelScript.SearchCriteria:interface'
  - uid: 'ExcelScript!ExcelScript.Range#flashFill:member(1)'
    summary: 'Apporte un remplissage instantané étendue en cours. Le remplissage instantané renseignera automatiquement les données lorsqu’il détectera un modèle, la plage doit donc être la seule plage de la colonne et avoir des données autour afin de trouver le modèle.'
    name: flashFill()
    fullName: flashFill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'flashFill(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getAbsoluteResizedRange:member(1)'
    summary: 'Obtient un objet Plage avec la même cellule supérieure gauche que l’objet de Plage en cours, mais avec un nombre spécifié de lignes et colonnes.'
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: numRows
          description: Nombre de lignes de la nouvelle taille de la plage.
          type:
            - number
        - id: numColumns
          description: Nombre de colonnes de la nouvelle taille de la plage.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getAddress:member(1)'
    summary: "Spécifie la référence de plage en style a1. La valeur de l’adresse contiendra la référence de la feuille (par exemple, «Sheet1\_! A1\_: B4 \")."
    name: getAddress()
    fullName: getAddress()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAddress(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getAddressLocal:member(1)'
    summary: Cette énumération spécifie la référence de plage pour la plage spécifiée dans la langue de l’utilisateur.
    name: getAddressLocal()
    fullName: getAddressLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAddressLocal(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getBoundingRect:member(1)'
    summary: "Renvoie le plus petit objet de plage qui englobe les plages données. Par exemple, la valeur GetBoundingRect pour «\_B2:C5\_» et «\_D10:E15\_» est «\_B2:E15\_»."
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: 'Nom, adresse ou objet de plage.'
          type:
            - 'ExcelScript!ExcelScript.Range#getBoundingRect~0:complex'
  - uid: 'ExcelScript!ExcelScript.Range#getCell:member(1)'
    summary: 'Renvoie l’objet de plage qui contient une cellule donnée sur la base des numéros de ligne et de colonne. La cellule peut être située en dehors des limites de sa plage parente, tant qu’elle reste dans la grille de la feuille de calcul. L’emplacement de la cellule renvoyée est déterminé à partir de la cellule supérieure gauche de la plage.'
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: row
          description: Numéro de ligne de la cellule à récupérer. Avec indice zéro.
          type:
            - number
        - id: column
          description: Numéro de colonne de la cellule à récupérer. Avec indice zéro.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getCellCount:member(1)'
    summary: "Indique le nombre de cellules de la plage. Cette API renvoie -1 si le nombre de cellules est supérieur à 2^31-1\_(2\_147\_483\_647)."
    name: getCellCount()
    fullName: getCellCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCellCount(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getColumn:member(1)'
    summary: Obtient une colonne contenue dans la plage.
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: column
          description: Numéro de colonne de la plage à récupérer. Avec indice zéro.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getColumnCount:member(1)'
    summary: Indique le nombre total de colonnes de la plage.
    name: getColumnCount()
    fullName: getColumnCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnCount(): number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          /**
           * This sample provides the count of negative numbers that are present
           * in the used range of the current worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the working range.
            let usedRange = workbook.getActiveWorksheet().getUsedRange();
            let rowCount = usedRange.getRowCount();
            let columnCount = usedRange.getColumnCount();

            // Save the values locally to avoid repeatedly asking the workbook.
            let usedRangeValues = usedRange.getValues();

            // Start the negative number counter.
            let negativeCount = 0;

            // Iterate over the entire range looking for negative numbers.
            for (let i = 0; i < rowCount; i++) {
              for (let j = 0; j < columnCount; j++) {
                if (usedRangeValues[i][j] < 0) {
                  negativeCount++;
                }
              }
            }

            // Log the negative number count to the console.
            console.log(negativeCount);
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Range#getColumnHidden:member(1)'
    summary: Indique si toutes les colonnes de la plage active sont masquées.
    name: getColumnHidden()
    fullName: getColumnHidden()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnHidden(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getColumnIndex:member(1)'
    summary: Indique le numéro de colonne de la première cellule de la plage. Avec indice zéro.
    name: getColumnIndex()
    fullName: getColumnIndex()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnIndex(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getColumnsAfter:member(1)'
    summary: Obtient un certain nombre de colonnes à droite de l’objet de plage actuel.
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Facultatif. Nombre de colonnes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getColumnsBefore:member(1)'
    summary: Obtient un certain nombre de colonnes à gauche de l’objet de plage actuel.
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Facultatif. Nombre de colonnes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getConditionalFormat:member(1)'
    summary: Renvoie une mise en forme conditionnelle à un ID donné.
    name: getConditionalFormat(id)
    fullName: getConditionalFormat(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getConditionalFormat(id: string): ConditionalFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        description: ''
      parameters:
        - id: id
          description: ID de la mise en forme conditionnelle.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#getConditionalFormats:member(1)'
    summary: Collection d’ConditionalFormats qui croise la plage.
    name: getConditionalFormats()
    fullName: getConditionalFormats()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getConditionalFormats(): ConditionalFormat[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getConditionalFormats~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getDataValidation:member(1)'
    summary: Renvoie un objet de validation des données.
    name: getDataValidation()
    fullName: getDataValidation()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataValidation(): DataValidation;'
      return:
        type:
          - 'ExcelScript!ExcelScript.DataValidation:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getDirectPrecedents:member(1)'
    summary: Renvoie un objet WorkbookRangeAreas qui représente la plage contenant tous les antécédents directs d’une cellule dans une même feuille de calcul ou dans plusieurs feuilles de calcul.
    name: getDirectPrecedents()
    fullName: getDirectPrecedents()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDirectPrecedents(): WorkbookRangeAreas;'
      return:
        type:
          - 'ExcelScript!ExcelScript.WorkbookRangeAreas:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getEntireColumn:member(1)'
    summary: "Obtient un objet qui représente la colonne entière de la plage (par exemple, si la plage actuelle représente les cellules «\_B4\_: E11\_», `getEntireColumn` qu’il s’agit d’une plage qui représente les colonnes «\_B\_:E\_»)."
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getEntireRow:member(1)'
    summary: "Obtient un objet qui représente la ligne entière de la plage (par exemple, si la plage actuelle représente les cellules «\_B4\_: E11\_», `GetEntireRow` qu’il s’agit d’une plage qui représente les lignes «\_4:11\_»)."
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormat:member(1)'
    summary: 'Renvoie un objet format qui encapsule la police, le remplissage, les bordures, l’alignement et d’autres propriétés de la plage.'
    name: getFormat()
    fullName: getFormat()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormat(): RangeFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeFormat:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormula:member(1)'
    summary: 'Représente la formule de la cellule dans la notation de style a1. Si la plage contient plusieurs cellules, les données de la première cellule (représentées par l’index de ligne 0 et l’index de colonne de 0) seront retournées.'
    name: getFormula()
    fullName: getFormula()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormula(): string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          /*
           * This script sets a cell's formula, 
           * then displays how Excel stores the cell's formula and value separately.
           */
          function main(workbook: ExcelScript.Workbook) {
            let selectedSheet = workbook.getActiveWorksheet();

            // Set A1 to 2.
            let a1 = selectedSheet.getRange("A1");
            a1.setValue(2);

            // Set B1 to the formula =(2*A1), which should equal 4.
            let b1 = selectedSheet.getRange("B1")
            b1.setFormula("=(2*A1)");

            // Log the current results for `getFormula` and `getValue` at B1.
            console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Range#getFormulaLocal:member(1)'
    summary: "Représente la formule de la cellule en notation de style a1, dans les paramètres régionaux de la langue de l’utilisateur et de la mise en forme des nombres. Par exemple, la formule «\_=SUM(A1, 1.5)\_» en anglais deviendrait «\_=SUMME(A1; 1,5)\_» en allemand. Si la plage contient plusieurs cellules, les données de la première cellule (représentées par l’index de ligne 0 et l’index de colonne de 0) seront retournées."
    name: getFormulaLocal()
    fullName: getFormulaLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulaLocal(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulaR1C1:member(1)'
    summary: 'Représente la formule de la cellule en notation de style L1C1. Si la plage contient plusieurs cellules, les données de la première cellule (représentées par l’index de ligne 0 et l’index de colonne de 0) seront retournées.'
    name: getFormulaR1C1()
    fullName: getFormulaR1C1()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulaR1C1(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulas:member(1)'
    summary: 'Représente la formule dans le style de notation A1. Si une cellule n’a pas de formule, sa valeur est renvoyée à la place.'
    name: getFormulas()
    fullName: getFormulas()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulas(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulasLocal:member(1)'
    summary: "Représente la formule en notation\_A1, en utilisant le langage et les paramètres de format de nombre régionaux de l’utilisateur. Par exemple, la formule «\_=SUM(A1, 1.5)\_» en anglais deviendrait «\_=SUMME(A1; 1,5)\_» en allemand. Si une cellule n’a pas de formule, sa valeur est renvoyée à la place."
    name: getFormulasLocal()
    fullName: getFormulasLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulasLocal(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulasR1C1:member(1)'
    summary: 'Représente la formule dans le style de notation R1C1. Si une cellule n’a pas de formule, sa valeur est renvoyée à la place.'
    name: getFormulasR1C1()
    fullName: getFormulasR1C1()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulasR1C1(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getHasSpill:member(1)'
    summary: Représente si toutes les cellules ont une bordure renversée. Renvoie la valeur true si toutes les cellules ont une bordure de renversement ou la valeur false si toutes les cellules n’ont pas de bordure de renversement. Renvoie la valeur null s’il y a des cellules à la fois avec et sans bordure de renversement dans la plage.
    name: getHasSpill()
    fullName: getHasSpill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHasSpill(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getHeight:member(1)'
    summary: 'Renvoie la distance en points pour zoom 100 %, à partir du bord supérieur de la plage au bord inférieur de la plage.'
    name: getHeight()
    fullName: getHeight()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHeight(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getHidden:member(1)'
    summary: Indique si toutes les cellules de la plage active sont masquées.
    name: getHidden()
    fullName: getHidden()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHidden(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getHyperlink:member(1)'
    summary: Représente le lien hypertexte de la plage active.
    name: getHyperlink()
    fullName: getHyperlink()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHyperlink(): RangeHyperlink;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeHyperlink:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getImage:member(1)'
    summary: 'Affiche la plage en tant qu’image png encodée au format Base64. **Important**: cette API n’est actuellement pas prise en charge dans Excel pour Mac. Visitez \[ OfficeDev/Office-js Issue \# 235 \] ( https://github.com/OfficeDev/office-js/issues/235) pour obtenir l’état actuel.'
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getIntersection:member(1)'
    summary: 'Obtient l’objet de plage qui représente l’intersection rectangulaire des plages données. Si aucune intersection n’est trouvée, renvoie un objet Null.'
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: Objet de plage ou adresse de plage utilisé pour déterminer l’intersection des plages.
          type:
            - 'ExcelScript!ExcelScript.Range#getIntersection~0:complex'
  - uid: 'ExcelScript!ExcelScript.Range#getIsEntireColumn:member(1)'
    summary: Représente si la plage active est une colonne entière.
    name: getIsEntireColumn()
    fullName: getIsEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIsEntireColumn(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getIsEntireRow:member(1)'
    summary: Représente si la plage active est une ligne entière.
    name: getIsEntireRow()
    fullName: getIsEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIsEntireRow(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLastCell:member(1)'
    summary: "Obtient la dernière cellule de la plage. Par exemple, la dernière cellule de la plage «\_B2:D5\_» est «\_D5\_»."
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLastColumn:member(1)'
    summary: "Obtient la dernière colonne de la plage. Par exemple, la dernière colonne de la plage «\_B2:D5\_» est «\_D2:D5\_»."
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLastRow:member(1)'
    summary: "Obtient la dernière ligne de la plage. Par exemple, la dernière ligne de la plage «\_B2:D5\_» est «\_B5:D5\_»."
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLeft:member(1)'
    summary: 'Renvoie la distance en points pour zoom 100 %, à partir du bord gauche de la feuille de calcul au bord gauche de la plage.'
    name: getLeft()
    fullName: getLeft()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLeft(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeState:member(1)'
    summary: Représente l’état du type de données de la cellule.
    name: getLinkedDataTypeState()
    fullName: getLinkedDataTypeState()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLinkedDataTypeState(): LinkedDataTypeState;'
      return:
        type:
          - 'ExcelScript!ExcelScript.LinkedDataTypeState:enum'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates:member(1)'
    summary: Représente l’état du type de données de chaque cellule.
    name: getLinkedDataTypeStates()
    fullName: getLinkedDataTypeStates()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLinkedDataTypeStates(): LinkedDataTypeState[][];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getMergedAreas:member(1)'
    summary: 'Renvoie un objet RangeAreas qui représente les zones fusionnées dans cette plage. Notez que si le nombre de zones fusionnées dans cette plage est supérieur à 512, l’API ne renverra pas le résultat.'
    name: getMergedAreas()
    fullName: getMergedAreas()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMergedAreas(): RangeAreas;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormat:member(1)'
    summary: 'Représente le code de format de nombre Excel de la plage donnée. Si la plage contient plusieurs cellules, les données de la première cellule (représentées par l’index de ligne 0 et l’index de colonne de 0) seront retournées.'
    name: getNumberFormat()
    fullName: getNumberFormat()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormat(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormatCategories:member(1)'
    summary: Représente la catégorie de format numérique de chaque cellule.
    name: getNumberFormatCategories()
    fullName: getNumberFormatCategories()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormatCategories(): NumberFormatCategory[][];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getNumberFormatCategories~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormatLocal:member(1)'
    summary: 'Représente le code de format de nombre Excel de la plage donnée, en fonction des paramètres de langue de l’utilisateur. Excel n’effectue aucune langue ou contrainte de format lors de l’obtention ou de la définition de la `numberFormatLocal` propriété. Tout texte renvoyé utilise les chaînes mises en forme localement en fonction de la langue spécifiée dans les paramètres système. Si la plage contient plusieurs cellules, les données de la première cellule (représentées par l’index de ligne 0 et l’index de colonne de 0) seront retournées.'
    name: getNumberFormatLocal()
    fullName: getNumberFormatLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormatLocal(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormats:member(1)'
    summary: Représente le code de format de nombre d’Excel pour la plage donnée.
    name: getNumberFormats()
    fullName: getNumberFormats()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormats(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormatsLocal:member(1)'
    summary: 'Représente le code de format de nombre d’Excel pour la plage donnée, en fonction des paramètres de langue de l’utilisateur. Excel n’effectue aucune langue ou contrainte de format lors de l’obtention ou de la définition de la `numberFormatLocal` propriété. Tout texte renvoyé utilise les chaînes mises en forme localement en fonction de la langue spécifiée dans les paramètres système.'
    name: getNumberFormatsLocal()
    fullName: getNumberFormatsLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormatsLocal(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getOffsetRange:member(1)'
    summary: 'Obtient un objet qui représente une plage décalée par rapport à la plage spécifiée. Les dimensions de la plage renvoyée correspondent à cette plage. Si la plage obtenue se retrouve en dehors des limites de grille de la feuille de calcul, une erreur est déclenchée.'
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          /**
           * This script gets adjacent cells using relative references.
           * Note that if the active cell is on the top row, part of the script fails, 
           * because it references the cell above the currently selected one.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the currently active cell in the workbook.
            let activeCell = workbook.getActiveCell();
            console.log(`The active cell's address is: ${activeCell.getAddress()}`);

            // Get the cell to the right of the active cell and set its value and color.
            let rightCell = activeCell.getOffsetRange(0,1);
            rightCell.setValue("Right cell");
            console.log(`The right cell's address is: ${rightCell.getAddress()}`);
            rightCell.getFormat().getFont().setColor("Magenta");
            rightCell.getFormat().getFill().setColor("Cyan");

            // Get the cell to the above of the active cell and set its value and color.
            // Note that this operation will fail if the active cell is in the top row.
            let aboveCell = activeCell.getOffsetRange(-1, 0);
            aboveCell.setValue("Above cell");
            console.log(`The above cell's address is: ${aboveCell.getAddress()}`);
            aboveCell.getFormat().getFont().setColor("White");
            aboveCell.getFormat().getFill().setColor("Black");
          }
          ```
      parameters:
        - id: rowOffset
          description: 'Nombre de lignes (positif, négatif ou nul) duquel décaler la plage. Les valeurs positives représentent un décalage vers le bas et les valeurs négatives un décalage vers le haut.'
          type:
            - number
        - id: columnOffset
          description: 'Nombre de colonnes (positif, négatif ou nul) duquel décaler la plage. Les valeurs positives représentent un décalage vers la droite et les valeurs négatives un décalage vers la gauche.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getPivotTables:member(1)'
    summary: Obtient une collection d’étendues de tableaux croisés dynamiques qui se chevauchent avec la plage.
    name: getPivotTables(fullyContained)
    fullName: getPivotTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTables(fullyContained?: boolean): PivotTable[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getPivotTables~0:complex'
        description: ''
      parameters:
        - id: fullyContained
          description: 'Si la valeur est true, renvoie uniquement les tableaux croisés dynamiques contenus dans les limites de la plage. La valeur par défaut est false.'
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#getPredefinedCellStyle:member(1)'
    summary: 'Représente le style de la plage actuelle. Si les styles des cellules sont incohérents, la valeur null est renvoyée. Pour les styles personnalisés, le nom du style est renvoyé. Pour les styles intégrés, une chaîne représentant une valeur dans l’énumération BuiltInStyle est retournée.'
    name: getPredefinedCellStyle()
    fullName: getPredefinedCellStyle()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPredefinedCellStyle(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getResizedRange:member(1)'
    summary: 'Obtient un objet de plage semblable à l’objet de plage actuel, mais avec le coin inférieur droit développé (ou contracté) selon un certain nombre de lignes et de colonnes.'
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          /**
           * This script copies the formatting in the active cell to the neighboring cells.
           * Note that this script only works when the active cell isn't on an edge of the worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the active cell.
            let activeCell = workbook.getActiveCell();

            // Get the cell that's one row above and one column to the left of the active cell.
            let cornerCell = activeCell.getOffsetRange(-1,-1);

            // Get a range that includes all the cells surrounding the active cell.
            let surroundingRange = cornerCell.getResizedRange(2, 2)

            // Copy the formatting from the active cell to the new range.
            surroundingRange.copyFrom(
              activeCell, /* The source range. */
              ExcelScript.RangeCopyType.formats /* What to copy. */
              );
          }
          ```
      parameters:
        - id: deltaRows
          description: 'Nombre de lignes par lequel développer le coin inférieur droit, par rapport à la plage actuelle. Utilisez un nombre positif pour étendre la plage ou un nombre négatif pour la réduire.'
          type:
            - number
        - id: deltaColumns
          description: Nombre de colonnes en fonction desquelles développer le coin inférieur droit par rapport à la plage actuelle. Utilisez un nombre positif pour étendre la plage ou un nombre négatif pour la réduire.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getRow:member(1)'
    summary: Obtient une ligne contenue dans la plage.
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: row
          description: Numéro de ligne de la plage à récupérer. Avec indice zéro.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getRowCount:member(1)'
    summary: Renvoie le nombre total de lignes de la plage.
    name: getRowCount()
    fullName: getRowCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowCount(): number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          /**
           * This sample provides the count of negative numbers that are present
           * in the used range of the current worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the working range.
            let usedRange = workbook.getActiveWorksheet().getUsedRange();
            let rowCount = usedRange.getRowCount();
            let columnCount = usedRange.getColumnCount();

            // Save the values locally to avoid repeatedly asking the workbook.
            let usedRangeValues = usedRange.getValues();

            // Start the negative number counter.
            let negativeCount = 0;

            // Iterate over the entire range looking for negative numbers.
            for (let i = 0; i < rowCount; i++) {
              for (let j = 0; j < columnCount; j++) {
                if (usedRangeValues[i][j] < 0) {
                  negativeCount++;
                }
              }
            }

            // Log the negative number count to the console.
            console.log(negativeCount);
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Range#getRowHidden:member(1)'
    summary: Indique si toutes les lignes de la plage active sont masquées.
    name: getRowHidden()
    fullName: getRowHidden()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowHidden(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getRowIndex:member(1)'
    summary: Renvoie le numéro de ligne de la première cellule de la plage. Avec indice zéro.
    name: getRowIndex()
    fullName: getRowIndex()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowIndex(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getRowsAbove:member(1)'
    summary: Obtient un certain nombre de lignes au-dessus de l’objet de plage actuel.
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Facultatif. Nombre de lignes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getRowsBelow:member(1)'
    summary: Obtient un certain nombre de lignes en dessous de l’objet de plage actuel.
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Facultatif. Nombre de lignes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getSavedAsArray:member(1)'
    summary: Représente si toutes les cellules sont enregistrées sous la forme d’une formule matricielle. Renvoie la valeur true si toutes les cellules doivent être enregistrées sous forme de formule matricielle ou la valeur false si toutes les cellules ne sont pas enregistrées sous forme de formule matricielle. Renvoie la valeur null si certaines cellules sont enregistrées sous la forme d’une formule matricielle et d’autres non.
    name: getSavedAsArray()
    fullName: getSavedAsArray()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSavedAsArray(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getSort:member(1)'
    summary: Représente le tri de plage de la plage actuelle.
    name: getSort()
    fullName: getSort()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSort(): RangeSort;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeSort:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getSpecialCells:member(1)'
    summary: 'Obtient l’objet RangeAreas, comprenant une ou plusieurs plages qui représente les cellules qui correspondent au type et à la valeur spécifiés. Si aucune cellule spéciale n’est trouvée, un objet null est renvoyé.'
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getSpecialCells(
                    cellType: SpecialCellType,
                    cellValueType?: SpecialCellValueType
                ): RangeAreas;
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
      parameters:
        - id: cellType
          description: Type de cellules à inclure.
          type:
            - 'ExcelScript!ExcelScript.SpecialCellType:enum'
        - id: cellValueType
          description: 'Si cellType est une constante ou une formule, cet argument est utilisé pour déterminer les types de cellules à inclure dans le résultat. Ces valeurs peuvent être combinées pour renvoyer plusieurs types. Par défaut, toutes les constantes ou formules sont sélectionnées, quel qu''en soit le type.'
          type:
            - 'ExcelScript!ExcelScript.SpecialCellValueType:enum'
  - uid: 'ExcelScript!ExcelScript.Range#getSpillingToRange:member(1)'
    summary: 'Obtient l’objet de la plage contenant la plage renversé lorsque appelée sur une cellule d’ancrage. Si la plage n’est pas une cellule d’ancrage ou si la plage de renversement est introuvable, un objet null est renvoyé.'
    name: getSpillingToRange()
    fullName: getSpillingToRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpillingToRange(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getSpillParent:member(1)'
    summary: 'Obtient l’objet de la plage contenant la cellule d’ancrage d’une cellule prise renversée dans. S’il ne s’agit pas d’une cellule de renversement ou si plusieurs cellules sont attribuées, un objet null est renvoyé.'
    name: getSpillParent()
    fullName: getSpillParent()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpillParent(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getSurroundingRegion:member(1)'
    summary: Renvoie un objet PLage qui représente la région environnante pour la cellule en haut à gauche de cette plage. Une région environnante est une plage délimitée par une combinaison de lignes et de colonnes vides par rapport à cette plage.
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getTables:member(1)'
    summary: Obtient une collection de tableaux qui se chevauchent avec la plage dans l’étendue.
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): Table[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getTables~0:complex'
        description: ''
      parameters:
        - id: fullyContained
          description: 'Si la valeur est true, renvoie uniquement les tables qui sont entièrement contenues dans les limites de la plage. La valeur par défaut est false.'
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#getText:member(1)'
    summary: 'Représente la valeur de texte de la plage spécifiée. La valeur de texte ne dépend pas de la largeur de la cellule. La \# substitution de signe qui se produit dans l’interface utilisateur d’Excel n’affecte pas la valeur de texte renvoyée par l’API. Si la plage contient plusieurs cellules, les données de la première cellule (représentées par l’index de ligne 0 et l’index de colonne de 0) seront retournées.'
    name: getText()
    fullName: getText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getText(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getTexts:member(1)'
    summary: Valeurs de texte de la plage spécifiée. La valeur de texte ne dépend pas de la largeur de la cellule. La \# substitution de signe qui se produit dans l’interface utilisateur d’Excel n’affecte pas la valeur de texte renvoyée par l’API.
    name: getTexts()
    fullName: getTexts()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTexts(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getTop:member(1)'
    summary: 'Renvoie la distance en points pour zoom 100 %, à partir du bord supérieur de la feuille de calcul au bord supérieur de la plage.'
    name: getTop()
    fullName: getTop()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTop(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getUsedRange:member(1)'
    summary: 'Renvoie la plage utilisée d’un objet de plage donné. Si aucune cellule n’est utilisée dans la plage, cette fonction renvoie un objet null.'
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: Prend uniquement en compte les cellules avec des valeurs sous forme de cellules utilisées.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#getValue:member(1)'
    summary: 'Représente la valeur brute de la plage spécifiée. Les données renvoyées peuvent être des chaînes, des valeurs numériques ou des valeurs booléennes. Une cellule contenant une erreur renvoie la chaîne d’erreur. Si la plage contient plusieurs cellules, les données de la première cellule (représentées par l’index de ligne 0 et l’index de colonne de 0) seront retournées.'
    name: getValue()
    fullName: getValue()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getValue(): any;'
      return:
        type:
          - any
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          /**
           * This sample reads the value of A1 and prints it to the console.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get the value of cell A1.
            let range = selectedSheet.getRange("A1");
            
            // Print the value of A1.
            console.log(range.getValue());
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Range#getValues:member(1)'
    summary: 'Représente les valeurs brutes de la plage spécifiée. Les données renvoyées peuvent être des chaînes, des valeurs numériques ou des valeurs booléennes. Les cellules contenant une erreur renvoie la chaîne d’erreur.'
    name: getValues()
    fullName: getValues()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getValues(): any[][];'
      return:
        type:
          - 'any[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getValueType:member(1)'
    summary: 'Représente le type de données dans la cellule. Si la plage contient plusieurs cellules, les données de la première cellule (représentées par l’index de ligne 0 et l’index de colonne de 0) seront retournées.'
    name: getValueType()
    fullName: getValueType()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getValueType(): RangeValueType;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeValueType:enum'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getValueTypes:member(1)'
    summary: Cette énumération spécifie le type de données dans chaque cellule.
    name: getValueTypes()
    fullName: getValueTypes()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getValueTypes(): RangeValueType[][];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getValueTypes~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getVisibleView:member(1)'
    summary: Représente les lignes visibles de la plage en cours.
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): RangeView;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeView:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getWidth:member(1)'
    summary: 'Renvoie la distance en points pour zoom 100 %, à partir du bord gauche de la plage au bord droit de la plage.'
    name: getWidth()
    fullName: getWidth()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWidth(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getWorksheet:member(1)'
    summary: Feuille de calcul contenant la plage.
    name: getWorksheet()
    fullName: getWorksheet()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWorksheet(): Worksheet;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#group:member(1)'
    summary: Regroupe les colonnes et les lignes d’un plan.
    name: group(groupOption)
    fullName: group(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOption: GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: "Indique comment la plage peut être regroupée par ligne ou par colonne. Une `InvalidArgument` erreur est générée lorsque l’option de groupe diffère de la propriété ou de la plage `isEntireRow` `isEntireColumn` ( `range.isEntireRow` elle a la valeur true et `groupOption` est «\_ByColumns\_» ou `range.isEntireColumn` est true et `groupOption` est «\_ByRows\_»)."
          type:
            - 'ExcelScript!ExcelScript.GroupOption:enum'
  - uid: 'ExcelScript!ExcelScript.Range#hideGroupDetails:member(1)'
    summary: Masque les détails du groupe de lignes ou de colonnes.
    name: hideGroupDetails(groupOption)
    fullName: hideGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hideGroupDetails(groupOption: GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: Indique s’il faut masquer les détails des lignes groupées ou des colonnes groupées.
          type:
            - 'ExcelScript!ExcelScript.GroupOption:enum'
  - uid: 'ExcelScript!ExcelScript.Range#insert:member(1)'
    summary: Insère une cellule ou une plage de cellules dans la feuille de calcul à la place d’une plage donnée et décale les autres cellules pour libérer de l’espace. Renvoie un nouvel objet Range dans l’espace vide qui s’est créé.
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: InsertShiftDirection): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: shift
          description: 'Indique la façon dont les cellules doivent être décalées. Pour plus d’informations, voir ExcelScript. InsertShiftDirection.'
          type:
            - 'ExcelScript!ExcelScript.InsertShiftDirection:enum'
  - uid: 'ExcelScript!ExcelScript.Range#merge:member(1)'
    summary: Fusionne la plage de cellules dans une zone de la feuille de calcul.
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: across
          description: "Facultatif. Définit la valeur «\_true\_» pour fusionner séparément les cellules de chaque ligne de la plage spécifiée. La valeur par défaut est «\_false\_»."
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#moveTo:member(1)'
    summary: 'Déplace les valeurs de cellule, la mise en forme et les formules de la plage actuelle à la plage de destination, en remplaçant les anciennes informations de ces cellules. La plage de destination est étendue automatiquement si elle est plus petite que la plage actuelle. Les cellules de la plage de destination qui se trouvent en dehors de la zone de la plage d’origine ne sont pas modifiées.'
    name: moveTo(destinationRange)
    fullName: moveTo(destinationRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'moveTo(destinationRange: Range | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: destinationRange spécifie la plage où les informations de cette plage seront déplacées.
          type:
            - 'ExcelScript!ExcelScript.Range#moveTo~0:complex'
  - uid: 'ExcelScript!ExcelScript.Range#removeDuplicates:member(1)'
    summary: Supprime les valeurs dupliquées de la plage spécifiée par les colonnes.
    name: 'removeDuplicates(columns, includesHeader)'
    fullName: 'removeDuplicates(columns, includesHeader)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        removeDuplicates(
                    columns: number[],
                    includesHeader: boolean
                ): RemoveDuplicatesResult;
      return:
        type:
          - 'ExcelScript!ExcelScript.RemoveDuplicatesResult:interface'
        description: ''
      parameters:
        - id: columns
          description: Les colonnes à l’intérieur de la plage qui peuvent contenir des doublons. Au moins une colonne doit être spécifiée. Avec indice zéro.
          type:
            - 'number[]'
        - id: includesHeader
          description: True si les données d’entrée contiennent un en-tête. La valeur par défaut est False.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#replaceAll:member(1)'
    summary: Détecte et remplace la chaîne donnée basée sur les critères spécifiés dans la plage active.
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): number;
      return:
        type:
          - number
        description: ''
      parameters:
        - id: text
          description: Chaîne à rechercher.
          type:
            - string
        - id: replacement
          description: Chaîne de remplacement de l’original par.
          type:
            - string
        - id: criteria
          description: Critères de remplacement supplémentaires.
          type:
            - 'ExcelScript!ExcelScript.ReplaceCriteria:interface'
  - uid: 'ExcelScript!ExcelScript.Range#select:member(1)'
    summary: Sélectionne la plage spécifiée dans l’interface utilisateur d’Excel.
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#setColumnHidden:member(1)'
    summary: Indique si toutes les colonnes de la plage active sont masquées.
    name: setColumnHidden(columnHidden)
    fullName: setColumnHidden(columnHidden)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setColumnHidden(columnHidden: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: columnHidden
          description: ''
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#setDirty:member(1)'
    summary: Cette méthode désigne une plage qui doit être recalculée lorsque le recalcul suivant se produit.
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#setFormula:member(1)'
    summary: 'Définit la formule de la cellule dans la notation de style a1. Si la plage contient plusieurs cellules, chaque cellule de la plage donnée est mise à jour avec les données d’entrée.'
    name: setFormula(formula)
    fullName: setFormula(formula)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormula(formula: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          /*
           * This script sets a cell's formula, 
           * then displays how Excel stores the cell's formula and value separately.
           */
          function main(workbook: ExcelScript.Workbook) {
            let selectedSheet = workbook.getActiveWorksheet();

            // Set A1 to 2.
            let a1 = selectedSheet.getRange("A1");
            a1.setValue(2);

            // Set B1 to the formula =(2*A1), which should equal 4.
            let b1 = selectedSheet.getRange("B1")
            b1.setFormula("=(2*A1)");

            // Log the current results for `getFormula` and `getValue` at B1.
            console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);
          }
          ```
      parameters:
        - id: formula
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setFormulaLocal:member(1)'
    summary: "Définissez la formule de la cellule en notation de style a1, dans les paramètres régionaux de la langue de l’utilisateur et de la mise en forme des numéros. Par exemple, la formule «\_=SUM(A1, 1.5)\_» en anglais deviendrait «\_=SUMME(A1; 1,5)\_» en allemand. Si la plage contient plusieurs cellules, chaque cellule de la plage donnée est mise à jour avec les données d’entrée."
    name: setFormulaLocal(formulaLocal)
    fullName: setFormulaLocal(formulaLocal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulaLocal(formulaLocal: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulaLocal
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setFormulaR1C1:member(1)'
    summary: 'Définit la formule de la cellule en notation de style L1C1. Si la plage contient plusieurs cellules, chaque cellule de la plage donnée est mise à jour avec les données d’entrée.'
    name: setFormulaR1C1(formulaR1C1)
    fullName: setFormulaR1C1(formulaR1C1)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulaR1C1(formulaR1C1: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulaR1C1
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setFormulas:member(1)'
    summary: 'Représente la formule dans le style de notation A1. Si une cellule n’a pas de formule, sa valeur est renvoyée à la place.'
    name: setFormulas(formulas)
    fullName: setFormulas(formulas)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulas(formulas: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulas
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setFormulasLocal:member(1)'
    summary: "Représente la formule en notation\_A1, en utilisant le langage et les paramètres de format de nombre régionaux de l’utilisateur. Par exemple, la formule «\_=SUM(A1, 1.5)\_» en anglais deviendrait «\_=SUMME(A1; 1,5)\_» en allemand. Si une cellule n’a pas de formule, sa valeur est renvoyée à la place."
    name: setFormulasLocal(formulasLocal)
    fullName: setFormulasLocal(formulasLocal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulasLocal(formulasLocal: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulasLocal
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setFormulasR1C1:member(1)'
    summary: 'Représente la formule dans le style de notation R1C1. Si une cellule n’a pas de formule, sa valeur est renvoyée à la place.'
    name: setFormulasR1C1(formulasR1C1)
    fullName: setFormulasR1C1(formulasR1C1)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulasR1C1(formulasR1C1: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulasR1C1
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setHyperlink:member(1)'
    summary: Représente le lien hypertexte de la plage active.
    name: setHyperlink(hyperlink)
    fullName: setHyperlink(hyperlink)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setHyperlink(hyperlink: RangeHyperlink): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          /** 
           * This script inserts a hyperlink to the first cell of the last worksheet in the workbook.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the active cell.
            let cell = workbook.getActiveCell();

            // Get the last worksheet in the workbook.
            // Note that this might be the current sheet if there's only one worksheet.
            let lastSheet = workbook.getLastWorksheet();

            // Get sheet name. 
            let linkedSheetName = lastSheet.getName();
            console.log(`Setting hyperlink of ${cell.getAddress()} to the ${linkedSheetName} sheet's A1 cell`);

            // Set the text for the hyperlink.
            let value = `Click to go to: ${linkedSheetName}`;

            // Create the hyperlink using that cell's value.
            cell.setHyperlink({
              textToDisplay: value.toString(),
              screenTip: `Navigate to ${linkedSheetName}`,
              documentReference: `${linkedSheetName}!A1`
            });
          }
          ```
      parameters:
        - id: hyperlink
          description: ''
          type:
            - 'ExcelScript!ExcelScript.RangeHyperlink:interface'
  - uid: 'ExcelScript!ExcelScript.Range#setNumberFormat:member(1)'
    summary: 'Définit la cellule code de format de numéro Excel pour la plage donnée. Si la plage contient plusieurs cellules, chaque cellule de la plage donnée est mise à jour avec les données d’entrée.'
    name: setNumberFormat(numberFormat)
    fullName: setNumberFormat(numberFormat)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNumberFormat(numberFormat: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: numberFormat
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setNumberFormatLocal:member(1)'
    summary: 'Définit la cellule code de format de numéro Excel pour la plage donnée, en fonction des paramètres de langue de l’utilisateur. Excel n’effectue aucune langue ou contrainte de format lors de l’obtention ou de la définition de la `numberFormatLocal` propriété. Tout texte renvoyé utilise les chaînes mises en forme localement en fonction de la langue spécifiée dans les paramètres système. Si la plage contient plusieurs cellules, chaque cellule de la plage donnée est mise à jour avec les données d’entrée.'
    name: setNumberFormatLocal(numberFormatLocal)
    fullName: setNumberFormatLocal(numberFormatLocal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNumberFormatLocal(numberFormatLocal: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: numberFormatLocal
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setNumberFormats:member(1)'
    summary: Représente le code de format de nombre d’Excel pour la plage donnée.
    name: setNumberFormats(numberFormats)
    fullName: setNumberFormats(numberFormats)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNumberFormats(numberFormats: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: numberFormats
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setNumberFormatsLocal:member(1)'
    summary: 'Représente le code de format de nombre d’Excel pour la plage donnée, en fonction des paramètres de langue de l’utilisateur. Excel n’effectue aucune langue ou contrainte de format lors de l’obtention ou de la définition de la `numberFormatLocal` propriété. Tout texte renvoyé utilise les chaînes mises en forme localement en fonction de la langue spécifiée dans les paramètres système.'
    name: setNumberFormatsLocal(numberFormatsLocal)
    fullName: setNumberFormatsLocal(numberFormatsLocal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNumberFormatsLocal(numberFormatsLocal: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: numberFormatsLocal
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setPredefinedCellStyle:member(1)'
    summary: 'Représente le style de la plage actuelle. Si les styles des cellules sont incohérents, la valeur null est renvoyée. Pour les styles personnalisés, le nom du style est renvoyé. Pour les styles intégrés, une chaîne représentant une valeur dans l’énumération BuiltInStyle est retournée.'
    name: setPredefinedCellStyle(predefinedCellStyle)
    fullName: setPredefinedCellStyle(predefinedCellStyle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setPredefinedCellStyle(predefinedCellStyle: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: predefinedCellStyle
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setRowHidden:member(1)'
    summary: Indique si toutes les lignes de la plage active sont masquées.
    name: setRowHidden(rowHidden)
    fullName: setRowHidden(rowHidden)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setRowHidden(rowHidden: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowHidden
          description: ''
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#setValue:member(1)'
    summary: 'Définit la valeur brute de la plage spécifiée. Les données définies peuvent être de type chaîne, numérique ou booléen. `null` la valeur sera ignorée (non définie ou remplacée dans Excel). Si la plage contient plusieurs cellules, chaque cellule de la plage donnée est mise à jour avec les données d’entrée.'
    name: setValue(value)
    fullName: setValue(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setValue(value: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
  - uid: 'ExcelScript!ExcelScript.Range#setValues:member(1)'
    summary: 'Représente les valeurs brutes de la plage spécifiée. Les données renvoyées peuvent être des chaînes, des valeurs numériques ou des valeurs booléennes. Les cellules contenant une erreur renvoie la chaîne d’erreur.'
    name: setValues(values)
    fullName: setValues(values)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setValues(values: any[][]): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          /**
           * This sample inserts some pre-loaded data into a range.
           * It also shows how to get a range that fits the data.
           */
           function main(workbook: ExcelScript.Workbook) {
             // Get the active cell.
             let currentCell = workbook.getActiveCell();
             
             // Calculate the range needed to fit the given data.
             let targetRange = currentCell.getResizedRange(DATA.length - 1, DATA[0].length - 1);

             // Set range values to the data.
             targetRange.setValues(DATA);

             // Autofit the columns so the worksheet is readable. 
             targetRange.getFormat().autofitColumns();
           }

           /* 
            * This sample's data is in a static 2-dimensional array.
            * You could also get the input from other ranges or sources.
            * Note that each row must have the same number of columns to be valid. 
            */
           const DATA = [
             ['Date', 'Salesperson', 'Product', 'Amount']
             , ['3/2/2020', 'Anne', 'Pizza', '$1400']
             , ['3/2/2020', 'Mariya', 'Pizza', '$1700']
             , ['3/7/2020', 'Mark', 'Sandwiches', '$1010']
             , ['3/24/2020', 'Anne', 'Pizza', '$750']
             , ['3/28/2020', 'Mark', 'Salads', '$510']
             , ['4/17/2020', 'Laura', 'Salads', '$900']
             , ['4/17/2020', 'Mariya', 'Salads', '$1600']
             , ['4/28/2020', 'Laura', 'Sandwiches', '$680']
           ];
          ```
      parameters:
        - id: values
          description: ''
          type:
            - 'any[][]'
  - uid: 'ExcelScript!ExcelScript.Range#showCard:member(1)'
    summary: Affiche la carte pour une cellule active si son contenu est riche en valeur.
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#showGroupDetails:member(1)'
    summary: Affiche les détails du groupe de lignes ou de colonnes.
    name: showGroupDetails(groupOption)
    fullName: showGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showGroupDetails(groupOption: GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: Indique s’il faut afficher les détails des lignes groupées ou des colonnes groupées.
          type:
            - 'ExcelScript!ExcelScript.GroupOption:enum'
  - uid: 'ExcelScript!ExcelScript.Range#ungroup:member(1)'
    summary: Dissocie les colonnes et les lignes d’un plan.
    name: ungroup(groupOption)
    fullName: ungroup(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOption: GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: Indique comment la plage peut être dissociée par des lignes ou des colonnes.
          type:
            - 'ExcelScript!ExcelScript.GroupOption:enum'
  - uid: 'ExcelScript!ExcelScript.Range#unmerge:member(1)'
    summary: Annule la fusion de la plage de cellules.
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: ''
references:
  - uid: 'ExcelScript!ExcelScript.ConditionalFormat:interface'
    name: ConditionalFormat
    fullName: ExcelScript.ConditionalFormat
  - uid: 'ExcelScript!ExcelScript.ConditionalFormatType:enum'
    name: ConditionalFormatType
    fullName: ExcelScript.ConditionalFormatType
  - uid: 'ExcelScript!ExcelScript.Range#autoFill~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.AutoFillType:enum'
    name: AutoFillType
    fullName: ExcelScript.AutoFillType
  - uid: 'ExcelScript!ExcelScript.ClearApplyTo:enum'
    name: ClearApplyTo
    fullName: ExcelScript.ClearApplyTo
  - uid: 'ExcelScript!ExcelScript.Range#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: ExcelScript.Range | ExcelScript.RangeAreas | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
        name: RangeAreas
        fullName: ExcelScript.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.RangeCopyType:enum'
    name: RangeCopyType
    fullName: ExcelScript.RangeCopyType
  - uid: 'ExcelScript!ExcelScript.DeleteShiftDirection:enum'
    name: DeleteShiftDirection
    fullName: ExcelScript.DeleteShiftDirection
  - uid: 'ExcelScript!ExcelScript.Range:interface'
    name: Range
    fullName: ExcelScript.Range
  - uid: 'ExcelScript!ExcelScript.SearchCriteria:interface'
    name: SearchCriteria
    fullName: ExcelScript.SearchCriteria
  - uid: 'ExcelScript!ExcelScript.Range#getBoundingRect~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.Range#getConditionalFormats~0:complex'
    name: 'ConditionalFormat[]'
    fullName: 'ExcelScript.ConditionalFormat[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        name: ConditionalFormat
        fullName: ExcelScript.ConditionalFormat
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.DataValidation:interface'
    name: DataValidation
    fullName: ExcelScript.DataValidation
  - uid: 'ExcelScript!ExcelScript.WorkbookRangeAreas:interface'
    name: WorkbookRangeAreas
    fullName: ExcelScript.WorkbookRangeAreas
  - uid: 'ExcelScript!ExcelScript.RangeFormat:interface'
    name: RangeFormat
    fullName: ExcelScript.RangeFormat
  - uid: 'ExcelScript!ExcelScript.RangeHyperlink:interface'
    name: RangeHyperlink
    fullName: ExcelScript.RangeHyperlink
  - uid: 'ExcelScript!ExcelScript.Range#getIntersection~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.LinkedDataTypeState:enum'
    name: LinkedDataTypeState
    fullName: ExcelScript.LinkedDataTypeState
  - uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates~0:complex'
    name: 'LinkedDataTypeState[][]'
    fullName: 'ExcelScript.LinkedDataTypeState[][]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.LinkedDataTypeState:enum'
        name: LinkedDataTypeState
        fullName: ExcelScript.LinkedDataTypeState
      - name: '[][]'
        fullName: '[][]'
  - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
    name: RangeAreas
    fullName: ExcelScript.RangeAreas
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormatCategories~0:complex'
    name: 'NumberFormatCategory[][]'
    fullName: 'ExcelScript.NumberFormatCategory[][]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.NumberFormatCategory:enum'
        name: NumberFormatCategory
        fullName: ExcelScript.NumberFormatCategory
      - name: '[][]'
        fullName: '[][]'
  - uid: 'ExcelScript!ExcelScript.Range#getPivotTables~0:complex'
    name: 'PivotTable[]'
    fullName: 'ExcelScript.PivotTable[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.PivotTable:interface'
        name: PivotTable
        fullName: ExcelScript.PivotTable
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.RangeSort:interface'
    name: RangeSort
    fullName: ExcelScript.RangeSort
  - uid: 'ExcelScript!ExcelScript.SpecialCellType:enum'
    name: SpecialCellType
    fullName: ExcelScript.SpecialCellType
  - uid: 'ExcelScript!ExcelScript.SpecialCellValueType:enum'
    name: SpecialCellValueType
    fullName: ExcelScript.SpecialCellValueType
  - uid: 'ExcelScript!ExcelScript.Range#getTables~0:complex'
    name: 'Table[]'
    fullName: 'ExcelScript.Table[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.RangeValueType:enum'
    name: RangeValueType
    fullName: ExcelScript.RangeValueType
  - uid: 'ExcelScript!ExcelScript.Range#getValueTypes~0:complex'
    name: 'RangeValueType[][]'
    fullName: 'ExcelScript.RangeValueType[][]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.RangeValueType:enum'
        name: RangeValueType
        fullName: ExcelScript.RangeValueType
      - name: '[][]'
        fullName: '[][]'
  - uid: 'ExcelScript!ExcelScript.RangeView:interface'
    name: RangeView
    fullName: ExcelScript.RangeView
  - uid: 'ExcelScript!ExcelScript.Worksheet:interface'
    name: Worksheet
    fullName: ExcelScript.Worksheet
  - uid: 'ExcelScript!ExcelScript.GroupOption:enum'
    name: GroupOption
    fullName: ExcelScript.GroupOption
  - uid: 'ExcelScript!ExcelScript.InsertShiftDirection:enum'
    name: InsertShiftDirection
    fullName: ExcelScript.InsertShiftDirection
  - uid: 'ExcelScript!ExcelScript.Range#moveTo~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.RemoveDuplicatesResult:interface'
    name: RemoveDuplicatesResult
    fullName: ExcelScript.RemoveDuplicatesResult
  - uid: 'ExcelScript!ExcelScript.ReplaceCriteria:interface'
    name: ReplaceCriteria
    fullName: ExcelScript.ReplaceCriteria