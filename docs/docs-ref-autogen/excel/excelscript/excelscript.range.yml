### YamlMime:TSType
name: ExcelScript.Range
uid: ExcelScript!ExcelScript.Range:interface
package: ExcelScript!
fullName: ExcelScript.Range
summary: La plage représente un ensemble d’une ou plusieurs cellules contiguës, telles qu’une cellule, une ligne, une colonne ou un bloc de cellules.
remarks: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script logs the address of the used range in the current worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current, active worksheet.\n  let currentWorksheet = workbook.getActiveWorksheet();\n\n  // Get the range containing all the cells with data or formatting.\n  let usedRange = currentWorksheet.getUsedRange();\n\n  // Log the range's address to the console.\n  console.log(usedRange.getAddress());\n}\n```"
isPreview: false
isDeprecated: false
type: interface
methods:
- name: addConditionalFormat(type)
  uid: ExcelScript!ExcelScript.Range#addConditionalFormat:member(1)
  package: ExcelScript!
  fullName: addConditionalFormat(type)
  summary: Ajoute un nouveau format conditionnel à la collection en priorité première/supérieure.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addConditionalFormat(type: ConditionalFormatType): ConditionalFormat;'
    parameters:
    - id: type
      description: Type de format conditionnel ajouté. Voir `ExcelScript.ConditionalFormatType` pour plus d’informations.
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormatType:enum" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This sample applies conditional formatting to the currently used range in the worksheet. \n * The conditional formatting is a green fill for the top 10% of values.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current worksheet.\n  let selectedSheet = workbook.getActiveWorksheet();\n\n  // Get the used range in the worksheet.\n  let range = selectedSheet.getUsedRange();\n\n  // Set the fill color to green for the top 10% of values in the range.\n  let conditionalFormat = range.addConditionalFormat(ExcelScript.ConditionalFormatType.topBottom)\n  conditionalFormat.getTopBottom().getFormat().getFill().setColor(\"green\");\n  conditionalFormat.getTopBottom().setRule({\n    rank: 10, // The percentage threshold.\n    type: ExcelScript.ConditionalTopBottomCriterionType.topPercent // The type of the top/bottom condition.\n  });\n}\n```"
- name: autoFill(destinationRange, autoFillType)
  uid: ExcelScript!ExcelScript.Range#autoFill:member(1)
  package: ExcelScript!
  fullName: autoFill(destinationRange, autoFillType)
  summary: Remplit une plage de la plage actuelle à la plage de destination à l’aide de la logique de remplissage automatique spécifiée. La plage de destination peut être `null` ou peut étendre la plage source horizontalement ou verticalement. Les plages discontiguous ne sont pas prises en charge.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      autoFill(
                  destinationRange?: Range | string,
                  autoFillType?: AutoFillType
              ): void;
    parameters:
    - id: destinationRange
      description: Plage de destination à remplissage automatique. Si la plage de destination est `null`<!-- -->, les données sont renseignées en fonction des cellules environnantes (ce qui est le comportement lors du double-clic sur la poignée de remplissage de plage de l’interface utilisateur).
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: autoFillType
      description: Type de remplissage automatique. Spécifie la façon dont la plage de destination doit être remplie, en fonction du contenu de la plage actuelle. La valeur par défaut est « FillDefault ».
      type: <xref uid="ExcelScript!ExcelScript.AutoFillType:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script uses the autofill feature to complete a table.\n * See https://support.microsoft.com/74e31bdd-d993-45da-aa82-35a236c5b5db\n * for examples of autofill scenarios.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current, active worksheet.\n  let currentWorksheet = workbook.getActiveWorksheet();\n\n  // Get the data range that shows the pattern.\n  let dataRange = currentWorksheet.getRange(\"C2:C3\");\n\n  // Autofill the connected range. C2:C3 are filled in. C4:C14 are blank.\n  // This uses the default behavior to match a pattern with the table's contents.\n  dataRange.autoFill(\"C2:C14\");\n}\n```"
- name: calculate()
  uid: ExcelScript!ExcelScript.Range#calculate:member(1)
  package: ExcelScript!
  fullName: calculate()
  summary: Calcule une plage de cellules dans une feuille de calcul.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script recalculates the used range of a specific worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Only recalculate if the calculation mode is not set to automatic.\n  if (workbook.getApplication().getCalculationMode() !== ExcelScript.CalculationMode.automatic) {\n    // Get the used range from a worksheet named \"Monthly Report\".\n    const sheet = workbook.getWorksheet(\"Monthly Report\");\n    const range = sheet.getUsedRange();\n    console.log(`Calculating ${range.getAddress()}`);\n\n    // Force all the used cells in that worksheet to calculate.\n    sheet.getUsedRange().calculate();\n  }\n}\n```"
- name: clear(applyTo)
  uid: ExcelScript!ExcelScript.Range#clear:member(1)
  package: ExcelScript!
  fullName: clear(applyTo)
  summary: Supprime les valeurs et les propriétés de format, de remplissage, de bordure, etc. de la plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(applyTo?: ClearApplyTo): void;'
    parameters:
    - id: applyTo
      description: Facultatif. Détermine le type d’action de suppression. Voir `ExcelScript.ClearApplyTo` pour plus d’informations.
      type: <xref uid="ExcelScript!ExcelScript.ClearApplyTo:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script removes all the formatting from the selected range.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the selected range.\n  let range = workbook.getSelectedRange();\n\n  // Clear all the formatting in that range.\n  range.clear(ExcelScript.ClearApplyTo.formats);\n}\n```"
- name: clearAllConditionalFormats()
  uid: ExcelScript!ExcelScript.Range#clearAllConditionalFormats:member(1)
  package: ExcelScript!
  fullName: clearAllConditionalFormats()
  summary: Efface toutes les mises en forme conditionnelles actives sur la plage spécifiée actuelle.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clearAllConditionalFormats(): void;'
    return:
      type: void
      description: ''
- name: convertDataTypeToText()
  uid: ExcelScript!ExcelScript.Range#convertDataTypeToText:member(1)
  package: ExcelScript!
  fullName: convertDataTypeToText()
  summary: Convertit les cellules de plage avec des types de données en texte.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertDataTypeToText(): void;'
    return:
      type: void
      description: ''
- name: copyFrom(sourceRange, copyType, skipBlanks, transpose)
  uid: ExcelScript!ExcelScript.Range#copyFrom:member(1)
  package: ExcelScript!
  fullName: copyFrom(sourceRange, copyType, skipBlanks, transpose)
  summary: Copie les données de cellule ou la mise en forme de la plage source ou `RangeAreas` de la plage actuelle. La plage de destination peut être d’une taille différente de celle de la plage source ou `RangeAreas`<!-- -->. La destination est développée automatiquement si elle est inférieure à la source.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      copyFrom(
                  sourceRange: Range | RangeAreas | string,
                  copyType?: RangeCopyType,
                  skipBlanks?: boolean,
                  transpose?: boolean
              ): void;
    parameters:
    - id: sourceRange
      description: Plage source ou `RangeAreas` à partir de laquelle copier. Lorsque la source `RangeAreas` a plusieurs plages, sa forme doit pouvoir être créée en supprimant des lignes ou des colonnes complètes d’une plage rectangulaire.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" /> | string
    - id: copyType
      description: Type de données de cellule ou mise en forme à copier. La valeur par défaut est « All ».
      type: <xref uid="ExcelScript!ExcelScript.RangeCopyType:enum" />
    - id: skipBlanks
      description: True s’il faut ignorer les cellules vides dans la plage source. La valeur par défaut est False.
      type: boolean
    - id: transpose
      description: True pour transposer les cellules de la plage de destination. La valeur par défaut est False.
      type: boolean
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script copies a table from one worksheet to a new worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the worksheet named \"TableTemplate\".\n  let base = workbook.getWorksheet(\"TableTemplate\");\n  \n  // Get the range to be copied based on the first table.\n  let tableRange = base.getTables()[0].getRange();\n\n  // Get the area in a new worksheet for the new table.\n  let newWorksheet = workbook.addWorksheet();\n  let newRange = newWorksheet.getRangeByIndexes(0,0, tableRange.getRowCount(), tableRange.getColumnCount());\n\n  // Copy the existing data into the new range.\n  newRange.copyFrom(tableRange);\n}\n```"
- name: delete(shift)
  uid: ExcelScript!ExcelScript.Range#delete:member(1)
  package: ExcelScript!
  fullName: delete(shift)
  summary: Supprime les cellules associées à la plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(shift: DeleteShiftDirection): void;'
    parameters:
    - id: shift
      description: Indique la façon dont les cellules doivent être décalées. Voir `ExcelScript.DeleteShiftDirection` pour plus d’informations.
      type: <xref uid="ExcelScript!ExcelScript.DeleteShiftDirection:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This sample creates a sample range, then deletes\n * \"A1\" using different DeleteShiftDirection values.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Add sample data to better visualize the delete changes.\n  const currentSheet = workbook.getActiveWorksheet();\n  currentSheet.getRange(\"A1:D4\").setValues([\n    [1,2,3,4],\n    [5,6,7,8],\n    [9,10,11,12],\n    [13,14,15,16]]);\n\n  // Delete A1 and shift the cells from the right to fill the space.\n  // The value being deleted is 1.\n  currentSheet.getRange(\"A1\").delete(ExcelScript.DeleteShiftDirection.left);\n\n  // Delete A1 and shift the cells from the bottom to fill the space.\n  // The value being deleted is 2.\n  currentSheet.getRange(\"A1\").delete(ExcelScript.DeleteShiftDirection.up);\n\n  // Log the sample range. The values should be:\n  /*\n    5, 3, 4, \"\",\n    9, 6, 7, 8,\n    13, 10, 11, 12,\n    \"\", 14, 15, 16\n  */\n  console.log(currentSheet.getRange(\"A1:D4\").getValues()); \n}\n```"
- name: find(text, criteria)
  uid: ExcelScript!ExcelScript.Range#find:member(1)
  package: ExcelScript!
  fullName: find(text, criteria)
  summary: Recherche la chaîne donnée basée sur les critères spécifiés. Si la plage actuelle est supérieure à une seule cellule, la recherche est limitée à cette plage, sinon la recherche couvre la totalité de la feuille commençant après cette cellule. S’il n’y a pas de correspondances, cette méthode retourne `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'find(text: string, criteria: SearchCriteria): Range;'
    parameters:
    - id: text
      description: Chaîne à rechercher.
      type: string
    - id: criteria
      description: Critères de recherche supplémentaires, notamment le sens de recherche et si la recherche doit correspondre à la cellule entière ou respecter la casse.
      type: <xref uid="ExcelScript!ExcelScript.SearchCriteria:interface" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script searches through a table column and finds cells marked \"no change\". \n * Those cells have \"no change\" replaced with the value from the cell to the left.\n * This script uses Range.find instead of Worksheet.findAll \n * to limit the search to a specific range.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the range of a table named \"Orders\".\n  let table = workbook.getTable(\"Orders\");\n  let range = table.getColumnByName(\"March\").getRange();\n\n  // Find all cells with the value \"no change\".\n  let cellToOverwrite = range.find(\"no change\", { completeMatch: true });\n  while (cellToOverwrite) {\n    let cellToCopyFrom = cellToOverwrite.getOffsetRange(0,-1);\n    cellToOverwrite.setValue(cellToCopyFrom.getValue());\n    cellToOverwrite = range.find(\"no change\", { completeMatch: true });\n  }\n}\n```"
- name: flashFill()
  uid: ExcelScript!ExcelScript.Range#flashFill:member(1)
  package: ExcelScript!
  fullName: flashFill()
  summary: Effectue un remplissage instantané à la plage actuelle. Le remplissage instantané remplit automatiquement les données lorsqu’il détecte un modèle. La plage doit donc être une plage de colonnes unique et contenir des données autour de celle-ci afin de trouver un modèle.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'flashFill(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script uses the Flash Fill feature to complete a table.\n * See https://support.microsoft.com/office/3f9bcf1e-db93-4890-94a0-1578341f73f7\n * for the example table.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current, active worksheet.\n  let currentWorksheet = workbook.getActiveWorksheet();\n\n  // Get the data range with a pattern and cells to fill. C2 is filled in. C3:C6 are blank.\n  let dataRange = currentWorksheet.getRange(\"C2:C6\");\n\n  // Flash fill the connected range. \n  dataRange.flashFill();\n}\n```"
- name: getAbsoluteResizedRange(numRows, numColumns)
  uid: ExcelScript!ExcelScript.Range#getAbsoluteResizedRange:member(1)
  package: ExcelScript!
  fullName: getAbsoluteResizedRange(numRows, numColumns)
  summary: Obtient un `Range` objet avec la même cellule en haut à gauche que l’objet actuel `Range` , mais avec les nombres spécifiés de lignes et de colonnes.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Range;'
    parameters:
    - id: numRows
      description: Nombre de lignes de la nouvelle taille de plage.
      type: number
    - id: numColumns
      description: Nombre de colonnes de la nouvelle taille de plage.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getAddress()
  uid: ExcelScript!ExcelScript.Range#getAddress:member(1)
  package: ExcelScript!
  fullName: getAddress()
  summary: Spécifie la référence de plage dans le style A1. La valeur d’adresse contient la référence de feuille (par exemple, « Sheet1! A1:B4 »).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAddress(): string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script logs the address of the used range in each worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Iterate over every worksheet in the workbook.\n  workbook.getWorksheets().forEach((sheet) => {\n    // Get the used range for a single worksheet.\n    let range = sheet.getUsedRange();\n\n    // Print the address of the used range to the console.\n    console.log(range.getAddress());\n  });\n}\n```"
- name: getAddressLocal()
  uid: ExcelScript!ExcelScript.Range#getAddressLocal:member(1)
  package: ExcelScript!
  fullName: getAddressLocal()
  summary: Représente la référence de plage pour la plage spécifiée dans la langue de l’utilisateur.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAddressLocal(): string;'
    return:
      type: string
      description: ''
- name: getBoundingRect(anotherRange)
  uid: ExcelScript!ExcelScript.Range#getBoundingRect:member(1)
  package: ExcelScript!
  fullName: getBoundingRect(anotherRange)
  summary: Renvoie le plus petit objet de plage qui englobe les plages données. Par exemple, « `GetBoundingRect` B2:C5 » et « D10:E15 » sont « B2:E15 ».
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getBoundingRect(anotherRange: Range | string): Range;'
    parameters:
    - id: anotherRange
      description: Objet de plage, adresse ou nom de plage.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script gets the bounding range of two existing ranges and puts a border around it.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current worksheet.\n  let sheet = workbook.getActiveWorksheet();\n\n  // Create two range objects for the sample.\n  let range1 = sheet.getRange(\"B2:C5\");\n  let range2 = sheet.getRange(\"D10:E15\");\n\n  // Get the rectangular range that fully includes both ranges.\n  let boundingRectangle = range1.getBoundingRect(range2);\n\n  // Add a border around the whole bounding range (B2:E15).\n  let format = boundingRectangle.getFormat();\n  format.getRangeBorder(ExcelScript.BorderIndex.edgeTop).setStyle(ExcelScript.BorderLineStyle.continuous); // Top border\n  format.getRangeBorder(ExcelScript.BorderIndex.edgeBottom).setStyle(ExcelScript.BorderLineStyle.continuous); // Bottom border\n  format.getRangeBorder(ExcelScript.BorderIndex.edgeLeft).setStyle(ExcelScript.BorderLineStyle.continuous); // Left border\n  format.getRangeBorder(ExcelScript.BorderIndex.edgeRight).setStyle(ExcelScript.BorderLineStyle.continuous); // Right border\n}\n```"
- name: getCell(row, column)
  uid: ExcelScript!ExcelScript.Range#getCell:member(1)
  package: ExcelScript!
  fullName: getCell(row, column)
  summary: Renvoie l’objet de plage qui contient une cellule donnée sur la base des numéros de ligne et de colonne. La cellule peut être en dehors des limites de sa plage parente, tant qu’elle reste dans la grille de la feuille de calcul. L’emplacement de la cellule renvoyée est déterminé à partir de la cellule supérieure gauche de la plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCell(row: number, column: number): Range;'
    parameters:
    - id: row
      description: Numéro de ligne de la cellule à récupérer. Avec indice zéro.
      type: number
    - id: column
      description: Numéro de colonne de la cellule à récupérer. Avec indice zéro.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getCellCount()
  uid: ExcelScript!ExcelScript.Range#getCellCount:member(1)
  package: ExcelScript!
  fullName: getCellCount()
  summary: Spécifie le nombre de cellules dans la plage. Cette API renvoie -1 si le nombre de cellules est supérieur à 2^31-1 (2 147 483 647).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCellCount(): number;'
    return:
      type: number
      description: ''
- name: getColumn(column)
  uid: ExcelScript!ExcelScript.Range#getColumn:member(1)
  package: ExcelScript!
  fullName: getColumn(column)
  summary: Obtient une colonne contenue dans la plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumn(column: number): Range;'
    parameters:
    - id: column
      description: Numéro de colonne de la plage à récupérer. Avec indice zéro.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getColumnCount()
  uid: ExcelScript!ExcelScript.Range#getColumnCount:member(1)
  package: ExcelScript!
  fullName: getColumnCount()
  summary: Spécifie le nombre total de colonnes dans la plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnCount(): number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This sample provides the count of negative numbers that are present\n * in the used range of the current worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the working range.\n  let usedRange = workbook.getActiveWorksheet().getUsedRange();\n  let rowCount = usedRange.getRowCount();\n  let columnCount = usedRange.getColumnCount();\n\n  // Save the values locally to avoid repeatedly asking the workbook.\n  let usedRangeValues = usedRange.getValues();\n\n  // Start the negative number counter.\n  let negativeCount = 0;\n\n  // Iterate over the entire range looking for negative numbers.\n  for (let i = 0; i < rowCount; i++) {\n    for (let j = 0; j < columnCount; j++) {\n      if (usedRangeValues[i][j] < 0) {\n        negativeCount++;\n      }\n    }\n  }\n\n  // Log the negative number count to the console.\n  console.log(negativeCount);\n}\n```"
- name: getColumnHidden()
  uid: ExcelScript!ExcelScript.Range#getColumnHidden:member(1)
  package: ExcelScript!
  fullName: getColumnHidden()
  summary: Représente si toutes les colonnes de la plage active sont masquées. La valeur est `true` lorsque toutes les colonnes d’une plage sont masquées. La valeur est quand aucune colonne de la plage n’est `false` masquée. La valeur est `null` lorsque certaines colonnes d’une plage sont masquées et que d’autres colonnes de la même plage ne sont pas masquées.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnHidden(): boolean;'
    return:
      type: boolean
      description: ''
- name: getColumnIndex()
  uid: ExcelScript!ExcelScript.Range#getColumnIndex:member(1)
  package: ExcelScript!
  fullName: getColumnIndex()
  summary: Spécifie le numéro de colonne de la première cellule de la plage. Avec indice zéro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnIndex(): number;'
    return:
      type: number
      description: ''
- name: getColumnsAfter(count)
  uid: ExcelScript!ExcelScript.Range#getColumnsAfter:member(1)
  package: ExcelScript!
  fullName: getColumnsAfter(count)
  summary: Obtient un certain nombre de colonnes à droite de l’objet actuel `Range` .
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnsAfter(count?: number): Range;'
    parameters:
    - id: count
      description: Facultatif. Nombre de colonnes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getColumnsBefore(count)
  uid: ExcelScript!ExcelScript.Range#getColumnsBefore:member(1)
  package: ExcelScript!
  fullName: getColumnsBefore(count)
  summary: Obtient un certain nombre de colonnes à gauche de l’objet actuel `Range` .
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnsBefore(count?: number): Range;'
    parameters:
    - id: count
      description: Facultatif. Nombre de colonnes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getConditionalFormat(id)
  uid: ExcelScript!ExcelScript.Range#getConditionalFormat:member(1)
  package: ExcelScript!
  fullName: getConditionalFormat(id)
  summary: Renvoie une mise en forme conditionnelle à un ID donné.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getConditionalFormat(id: string): ConditionalFormat;'
    parameters:
    - id: id
      description: ID du format conditionnel.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />
      description: ''
- name: getConditionalFormats()
  uid: ExcelScript!ExcelScript.Range#getConditionalFormats:member(1)
  package: ExcelScript!
  fullName: getConditionalFormats()
  summary: Collection de `ConditionalFormats` cette plage qui croise la plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getConditionalFormats(): ConditionalFormat[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />[]
      description: ''
- name: getDataValidation()
  uid: ExcelScript!ExcelScript.Range#getDataValidation:member(1)
  package: ExcelScript!
  fullName: getDataValidation()
  summary: Renvoie un objet de validation des données.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataValidation(): DataValidation;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.DataValidation:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script creates a drop-down selection list for a cell. It uses the existing values of the selected range as the choices for the list.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the values for data validation.\n  let selectedRange = workbook.getSelectedRange();\n  let rangeValues = selectedRange.getValues();\n\n  // Convert the values into a comma-delimited string.\n  let dataValidationListString = \"\";\n  rangeValues.forEach((rangeValueRow) => {\n    rangeValueRow.forEach((value) => {\n      dataValidationListString += value + \",\";\n    });\n  });\n\n  // Clear the old range.\n  selectedRange.clear(ExcelScript.ClearApplyTo.contents);\n\n  // Apply the data validation to the first cell in the selected range.\n  let targetCell = selectedRange.getCell(0,0);\n  let dataValidation = targetCell.getDataValidation();\n\n  // Set the content of the drop-down list.\n  dataValidation.setRule({\n      list: {\n        inCellDropDown: true,\n        source: dataValidationListString\n      }\n    });\n}\n```"
- name: getDirectPrecedents()
  uid: ExcelScript!ExcelScript.Range#getDirectPrecedents:member(1)
  package: ExcelScript!
  fullName: getDirectPrecedents()
  summary: Renvoie un `WorkbookRangeAreas` objet qui représente la plage contenant tous les précédents directs d’une cellule dans la même feuille de calcul ou dans plusieurs feuilles de calcul.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDirectPrecedents(): WorkbookRangeAreas;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.WorkbookRangeAreas:interface" />
      description: ''
- name: getEntireColumn()
  uid: ExcelScript!ExcelScript.Range#getEntireColumn:member(1)
  package: ExcelScript!
  fullName: getEntireColumn()
  summary: Obtient un objet qui représente la colonne entière de la plage (par exemple, si la plage actuelle représente les cellules « B4:E11 », il `getEntireColumn` s’agit d’une plage qui représente les colonnes « B:E »).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntireColumn(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getEntireRow()
  uid: ExcelScript!ExcelScript.Range#getEntireRow:member(1)
  package: ExcelScript!
  fullName: getEntireRow()
  summary: Obtient un objet qui représente la ligne entière de la plage (par exemple, si la plage actuelle représente les cellules « B4:E11 », il `GetEntireRow` s’agit d’une plage qui représente les lignes « 4:11 »).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntireRow(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getExtendedRange(direction, activeCell)
  uid: ExcelScript!ExcelScript.Range#getExtendedRange:member(1)
  package: ExcelScript!
  fullName: getExtendedRange(direction, activeCell)
  summary: Renvoie un objet de plage qui inclut la plage actuelle et jusqu’au bord de la plage, en fonction de la direction fournie. Cela correspond au comportement de la touche Ctrl+Maj+Flèche dans l’interface utilisateur Excel sur Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      getExtendedRange(
                  direction: KeyboardDirection,
                  activeCell?: Range | string
              ): Range;
    parameters:
    - id: direction
      description: Direction de la cellule active.
      type: <xref uid="ExcelScript!ExcelScript.KeyboardDirection:enum" />
    - id: activeCell
      description: Cellule active de cette plage. Par défaut, la cellule active est la cellule supérieure gauche de la plage. Une erreur est générée si la cellule active ne se trouve pas dans cette plage.
      type: "<xref uid=\"ExcelScript!ExcelScript.Range:interface\" /> | string\n        "
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script makes the font bold on all the contiguous cells between \n * A1 and the bottom of the used range of the first column.\n */\nfunction main(workbook: ExcelScript.Workbook)\n{\n  // Get the current worksheet.\n  let selectedSheet = workbook.getActiveWorksheet();\n\n  // Get every cell that's used between A1 and the end of the column.\n  // This recreates the Ctrl+Shift+Down arrow key behavior.\n  let firstCell = selectedSheet.getRange(\"A1\");\n  let firstColumn = firstCell.getExtendedRange(ExcelScript.KeyboardDirection.down);\n\n  // Set the font to bold in that range.\n  firstColumn.getFormat().getFont().setBold(true);\n}\n```"
- name: getFormat()
  uid: ExcelScript!ExcelScript.Range#getFormat:member(1)
  package: ExcelScript!
  fullName: getFormat()
  summary: Renvoie un objet de format, encapsulant la police, le remplissage, les bordures, l’alignement et d’autres propriétés de la plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormat(): RangeFormat;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeFormat:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script gives the total row of a table a green color fill.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the first table in the workbook.\n  let table = workbook.getTables()[0];\n\n  // Get the range for the total row of the table.\n  let totalRange = table.getTotalRowRange();\n\n  // Set the fill color to green.\n  totalRange.getFormat().getFill().setColor(\"green\");\n}\n```"
- name: getFormula()
  uid: ExcelScript!ExcelScript.Range#getFormula:member(1)
  package: ExcelScript!
  fullName: getFormula()
  summary: Représente la formule de cellule en notation de style A1. Si la plage contient plusieurs cellules, les données de la première cellule (représentées par l’index de ligne 0 et l’index de colonne de 0) sont retournées.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormula(): string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/*\n * This script sets a cell's formula, \n * then displays how Excel stores the cell's formula and value separately.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  let selectedSheet = workbook.getActiveWorksheet();\n\n  // Set A1 to 2.\n  let a1 = selectedSheet.getRange(\"A1\");\n  a1.setValue(2);\n\n  // Set B1 to the formula =(2*A1), which should equal 4.\n  let b1 = selectedSheet.getRange(\"B1\")\n  b1.setFormula(\"=(2*A1)\");\n\n  // Log the current results for `getFormula` and `getValue` at B1.\n  console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);\n}\n```"
- name: getFormulaLocal()
  uid: ExcelScript!ExcelScript.Range#getFormulaLocal:member(1)
  package: ExcelScript!
  fullName: getFormulaLocal()
  summary: Représente la formule de cellule dans la notation de style A1, dans la langue de l’utilisateur et dans les paramètres régionaux de mise en forme des nombres. Par exemple, la formule « =SUM(A1, 1.5) » en anglais deviendrait « =SUMME(A1; 1,5) » en allemand. Si la plage contient plusieurs cellules, les données de la première cellule (représentées par l’index de ligne 0 et l’index de colonne de 0) sont retournées.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormulaLocal(): string;'
    return:
      type: string
      description: ''
- name: getFormulaR1C1()
  uid: ExcelScript!ExcelScript.Range#getFormulaR1C1:member(1)
  package: ExcelScript!
  fullName: getFormulaR1C1()
  summary: Représente la formule de cellule en notation de style R1C1. Si la plage contient plusieurs cellules, les données de la première cellule (représentées par l’index de ligne 0 et l’index de colonne de 0) sont retournées.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormulaR1C1(): string;'
    return:
      type: string
      description: ''
- name: getFormulas()
  uid: ExcelScript!ExcelScript.Range#getFormulas:member(1)
  package: ExcelScript!
  fullName: getFormulas()
  summary: Représente la formule dans le style de notation A1. Si une cellule n’a pas de formule, sa valeur est retournée à la place.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormulas(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getFormulasLocal()
  uid: ExcelScript!ExcelScript.Range#getFormulasLocal:member(1)
  package: ExcelScript!
  fullName: getFormulasLocal()
  summary: Représente la formule en notation A1, en utilisant le langage et les paramètres de format de nombre régionaux de l’utilisateur. Par exemple, la formule « =SUM(A1, 1.5) » en anglais deviendrait « =SUMME(A1; 1,5) » en allemand. Si une cellule n’a pas de formule, sa valeur est retournée à la place.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormulasLocal(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getFormulasR1C1()
  uid: ExcelScript!ExcelScript.Range#getFormulasR1C1:member(1)
  package: ExcelScript!
  fullName: getFormulasR1C1()
  summary: Représente la formule dans le style de notation R1C1. Si une cellule n’a pas de formule, sa valeur est retournée à la place.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormulasR1C1(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getHasSpill()
  uid: ExcelScript!ExcelScript.Range#getHasSpill:member(1)
  package: ExcelScript!
  fullName: getHasSpill()
  summary: Représente si toutes les cellules ont une bordure renversée. `true` Renvoie si toutes les cellules ont une bordure de débordement, ou `false` si toutes les cellules n’ont pas de bordure de débordement. Renvoie s’il existe des `null` cellules avec et sans bordures de débordement dans la plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getHasSpill(): boolean;'
    return:
      type: boolean
      description: ''
- name: getHeight()
  uid: ExcelScript!ExcelScript.Range#getHeight:member(1)
  package: ExcelScript!
  fullName: getHeight()
  summary: Renvoie la distance en points, pour un zoom de 100 %, entre le bord supérieur de la plage et le bord inférieur de la plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getHeight(): number;'
    return:
      type: number
      description: ''
- name: getHidden()
  uid: ExcelScript!ExcelScript.Range#getHidden:member(1)
  package: ExcelScript!
  fullName: getHidden()
  summary: Représente si toutes les cellules de la plage actuelle sont masquées. La valeur est `true` lorsque toutes les cellules d’une plage sont masquées. La valeur est quand aucune cellule de la plage n’est `false` masquée. La valeur est `null` lorsque certaines cellules d’une plage sont masquées et que d’autres cellules de la même plage ne sont pas masquées.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getHidden(): boolean;'
    return:
      type: boolean
      description: ''
- name: getHyperlink()
  uid: ExcelScript!ExcelScript.Range#getHyperlink:member(1)
  package: ExcelScript!
  fullName: getHyperlink()
  summary: Représente le lien hypertexte de la plage actuelle.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getHyperlink(): RangeHyperlink;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeHyperlink:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This sample clears all of the hyperlinks from the current worksheet\n * and removes the usual hyperlink formatting.\n */\nfunction main(workbook: ExcelScript.Workbook, sheetName: string = 'Sheet1') {\n  // Get the active worksheet. \n  let sheet = workbook.getWorksheet(sheetName);\n\n  // Get the used range to operate on.\n  // For large ranges (over 10000 entries), consider splitting the operation into batches for performance.\n  const targetRange = sheet.getUsedRange(true);\n  console.log(`Target Range to clear hyperlinks from: ${targetRange.getAddress()}`);\n\n  const rowCount = targetRange.getRowCount();\n  const colCount = targetRange.getColumnCount();\n  console.log(`Searching for hyperlinks in ${targetRange.getAddress()} which contains ${(rowCount * colCount)} cells`);\n\n  // Go through each individual cell looking for a hyperlink. \n  // This allows us to limit the formatting changes to only the cells with hyperlink formatting.\n  let clearedCount = 0;\n  for (let i = 0; i < rowCount; i++) {\n    for (let j = 0; j < colCount; j++) {\n      const cell = targetRange.getCell(i, j);\n      const hyperlink = cell.getHyperlink();\n      if (hyperlink) {\n        cell.clear(ExcelScript.ClearApplyTo.hyperlinks);\n        cell.getFormat().getFont().setUnderline(ExcelScript.RangeUnderlineStyle.none);\n        cell.getFormat().getFont().setColor('Black');\n        clearedCount++;\n      }\n    }\n  }\n\n  console.log(`Done. Cleared hyperlinks from ${clearedCount} cells`);\n}\n```"
- name: getImage()
  uid: ExcelScript!ExcelScript.Range#getImage:member(1)
  package: ExcelScript!
  fullName: getImage()
  summary: >-
    Affiche la plage sous la forme d’une image png encodée en base64.


    **Remarque** : Il existe un problème connu avec `Range.getImage` lequel le texte encapsulé ou le texte dépasse la largeur de la cellule à afficher sur la même ligne sans habillage de ligne. Cela rend l’image obtenue illisible, car le texte déborde sur l’ensemble de la ligne. Pour contourner ce problème, assurez-vous que les données de la plage correspondent à chacune des cellules sous la forme d’une seule ligne.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getImage(): string;'
    return:
      type: string
      description: ''
- name: getIntersection(anotherRange)
  uid: ExcelScript!ExcelScript.Range#getIntersection:member(1)
  package: ExcelScript!
  fullName: getIntersection(anotherRange)
  summary: Obtient l’objet de plage qui représente l’intersection rectangulaire des plages données. Si aucune intersection n’est trouvée, cette méthode retourne `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIntersection(anotherRange: Range | string): Range;'
    parameters:
    - id: anotherRange
      description: Objet de plage ou adresse de plage utilisé pour déterminer l’intersection des plages.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getIsEntireColumn()
  uid: ExcelScript!ExcelScript.Range#getIsEntireColumn:member(1)
  package: ExcelScript!
  fullName: getIsEntireColumn()
  summary: Représente si la plage active est une colonne entière.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIsEntireColumn(): boolean;'
    return:
      type: boolean
      description: ''
- name: getIsEntireRow()
  uid: ExcelScript!ExcelScript.Range#getIsEntireRow:member(1)
  package: ExcelScript!
  fullName: getIsEntireRow()
  summary: Représente si la plage active est une ligne entière.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIsEntireRow(): boolean;'
    return:
      type: boolean
      description: ''
- name: getLastCell()
  uid: ExcelScript!ExcelScript.Range#getLastCell:member(1)
  package: ExcelScript!
  fullName: getLastCell()
  summary: Obtient la dernière cellule de la plage. Par exemple, la dernière cellule de la plage « B2:D5 » est « D5 ».
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastCell(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getLastColumn()
  uid: ExcelScript!ExcelScript.Range#getLastColumn:member(1)
  package: ExcelScript!
  fullName: getLastColumn()
  summary: Obtient la dernière colonne de la plage. Par exemple, la dernière colonne de la plage « B2:D5 » est « D2:D5 ».
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastColumn(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getLastRow()
  uid: ExcelScript!ExcelScript.Range#getLastRow:member(1)
  package: ExcelScript!
  fullName: getLastRow()
  summary: Obtient la dernière ligne de la plage. Par exemple, la dernière ligne de la plage « B2:D5 » est « B5:D5 ».
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastRow(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getLeft()
  uid: ExcelScript!ExcelScript.Range#getLeft:member(1)
  package: ExcelScript!
  fullName: getLeft()
  summary: Renvoie la distance en points, pour un zoom de 100 %, entre le bord gauche de la feuille de calcul et le bord gauche de la plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLeft(): number;'
    return:
      type: number
      description: ''
- name: getLinkedDataTypeState()
  uid: ExcelScript!ExcelScript.Range#getLinkedDataTypeState:member(1)
  package: ExcelScript!
  fullName: getLinkedDataTypeState()
  summary: Représente l’état du type de données de la cellule.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLinkedDataTypeState(): LinkedDataTypeState;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.LinkedDataTypeState:enum" />
      description: ''
- name: getLinkedDataTypeStates()
  uid: ExcelScript!ExcelScript.Range#getLinkedDataTypeStates:member(1)
  package: ExcelScript!
  fullName: getLinkedDataTypeStates()
  summary: Représente l’état du type de données de chaque cellule.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLinkedDataTypeStates(): LinkedDataTypeState[][];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.LinkedDataTypeState:enum" />[][]
      description: ''
- name: getMergedAreas()
  uid: ExcelScript!ExcelScript.Range#getMergedAreas:member(1)
  package: ExcelScript!
  fullName: getMergedAreas()
  summary: Retourne un `RangeAreas` objet qui représente les zones fusionnées dans cette plage. Notez que si le nombre de zones fusionnées dans cette plage est supérieur à 512, cette méthode ne retourne pas le résultat. Si l’objet n’existe pas, cette fonction retourne un objet dont `isNullObject` la `RangeAreas` propriété est définie sur`true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMergedAreas(): RangeAreas;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: ''
- name: getNumberFormat()
  uid: ExcelScript!ExcelScript.Range#getNumberFormat:member(1)
  package: ExcelScript!
  fullName: getNumberFormat()
  summary: Représente le code de format de numéro Excel de cellule pour la plage donnée. Si la plage contient plusieurs cellules, les données de la première cellule (représentées par l’index de ligne 0 et l’index de colonne de 0) sont retournées.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormat(): string;'
    return:
      type: string
      description: ''
- name: getNumberFormatCategories()
  uid: ExcelScript!ExcelScript.Range#getNumberFormatCategories:member(1)
  package: ExcelScript!
  fullName: getNumberFormatCategories()
  summary: Représente la catégorie de format numérique de chaque cellule.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormatCategories(): NumberFormatCategory[][];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.NumberFormatCategory:enum" />[][]
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script finds cells in a table column that are not formatted as currency\n * and sets the fill color to red.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the \"Cost\" column from the \"Expenses\" table.\n  const table = workbook.getTable(\"Expenses\");\n  const costColumn = table.getColumnByName(\"Cost\");\n  const costColumnRange = costColumn.getRangeBetweenHeaderAndTotal();\n\n  // Get the number format categories for the column's range.\n  const numberFormatCategories = costColumnRange.getNumberFormatCategories();\n\n  // If any cell in the column doesn't have a currency format, make the cell red.\n  numberFormatCategories.forEach((category, index) =>{\n    if (category[0] != ExcelScript.NumberFormatCategory.currency) {\n      costColumnRange.getCell(index, 0).getFormat().getFill().setColor(\"red\");\n    }\n  }); \n}\n```"
- name: getNumberFormatCategory()
  uid: ExcelScript!ExcelScript.Range#getNumberFormatCategory:member(1)
  package: ExcelScript!
  fullName: getNumberFormatCategory()
  summary: Spécifie la catégorie de format numérique de la première cellule de la plage (représentée par l’index de ligne 0 et l’index de colonne de 0).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormatCategory(): NumberFormatCategory;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.NumberFormatCategory:enum" />
      description: ''
- name: getNumberFormatLocal()
  uid: ExcelScript!ExcelScript.Range#getNumberFormatLocal:member(1)
  package: ExcelScript!
  fullName: getNumberFormatLocal()
  summary: Représente le code de format de numéro Excel de cellule pour la plage donnée, en fonction des paramètres de langue de l’utilisateur. Excel n’effectue aucune contrainte de langue ou de format lors de l’obtention ou de la définition de la `numberFormatLocal` propriété. Tout texte renvoyé utilise les chaînes mises en forme localement en fonction de la langue spécifiée dans les paramètres système. Si la plage contient plusieurs cellules, les données de la première cellule (représentées par l’index de ligne 0 et l’index de colonne de 0) sont retournées.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormatLocal(): string;'
    return:
      type: string
      description: ''
- name: getNumberFormats()
  uid: ExcelScript!ExcelScript.Range#getNumberFormats:member(1)
  package: ExcelScript!
  fullName: getNumberFormats()
  summary: Représente le code de format numérique d’Excel pour la plage donnée.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormats(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getNumberFormatsLocal()
  uid: ExcelScript!ExcelScript.Range#getNumberFormatsLocal:member(1)
  package: ExcelScript!
  fullName: getNumberFormatsLocal()
  summary: Représente le code de format numérique d’Excel pour la plage donnée, en fonction des paramètres de langue de l’utilisateur. Excel n’effectue aucune contrainte de langue ou de format lors de l’obtention ou de la définition de la `numberFormatLocal` propriété. Tout texte renvoyé utilise les chaînes mises en forme localement en fonction de la langue spécifiée dans les paramètres système.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormatsLocal(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getOffsetRange(rowOffset, columnOffset)
  uid: ExcelScript!ExcelScript.Range#getOffsetRange:member(1)
  package: ExcelScript!
  fullName: getOffsetRange(rowOffset, columnOffset)
  summary: Obtient un objet qui représente une plage décalée par rapport à la plage spécifiée. Les dimensions de la plage renvoyée correspondent à cette plage. Si la plage obtenue se retrouve en dehors des limites de grille de la feuille de calcul, une erreur est déclenchée.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getOffsetRange(rowOffset: number, columnOffset: number): Range;'
    parameters:
    - id: rowOffset
      description: Nombre de lignes (positif, négatif ou nul) duquel décaler la plage. Les valeurs positives représentent un décalage vers le bas et les valeurs négatives un décalage vers le haut.
      type: number
    - id: columnOffset
      description: Nombre de colonnes (positif, négatif ou nul) duquel décaler la plage. Les valeurs positives représentent un décalage vers la droite et les valeurs négatives un décalage vers la gauche.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script gets adjacent cells using relative references.\n * Note that if the active cell is on the top row, part of the script fails, \n * because it references the cell above the currently selected one.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the currently active cell in the workbook.\n  let activeCell = workbook.getActiveCell();\n  console.log(`The active cell's address is: ${activeCell.getAddress()}`);\n\n  // Get the cell to the right of the active cell and set its value and color.\n  let rightCell = activeCell.getOffsetRange(0,1);\n  rightCell.setValue(\"Right cell\");\n  console.log(`The right cell's address is: ${rightCell.getAddress()}`);\n  rightCell.getFormat().getFont().setColor(\"Magenta\");\n  rightCell.getFormat().getFill().setColor(\"Cyan\");\n\n  // Get the cell to the above of the active cell and set its value and color.\n  // Note that this operation will fail if the active cell is in the top row.\n  let aboveCell = activeCell.getOffsetRange(-1, 0);\n  aboveCell.setValue(\"Above cell\");\n  console.log(`The above cell's address is: ${aboveCell.getAddress()}`);\n  aboveCell.getFormat().getFont().setColor(\"White\");\n  aboveCell.getFormat().getFill().setColor(\"Black\");\n}\n```"
- name: getPivotTables(fullyContained)
  uid: ExcelScript!ExcelScript.Range#getPivotTables:member(1)
  package: ExcelScript!
  fullName: getPivotTables(fullyContained)
  summary: Obtient une collection délimitée de tableaux croisés dynamiques qui chevauchent la plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTables(fullyContained?: boolean): PivotTable[];'
    parameters:
    - id: fullyContained
      description: Si `true`<!-- -->, retourne uniquement les tableaux croisés dynamiques qui sont entièrement contenus dans les limites de la plage. La valeur par défaut est `false`<!-- -->.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTable:interface" />[]
      description: ''
- name: getPredefinedCellStyle()
  uid: ExcelScript!ExcelScript.Range#getPredefinedCellStyle:member(1)
  package: ExcelScript!
  fullName: getPredefinedCellStyle()
  summary: Représente le style de la plage actuelle. Si les styles des cellules sont incohérents, `null` ils sont retournés. Pour les styles personnalisés, le nom du style est retourné. Pour les styles intégrés, une chaîne représentant une valeur dans l’énumération `BuiltInStyle` est retournée.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPredefinedCellStyle(): string;'
    return:
      type: string
      description: ''
- name: getRangeEdge(direction, activeCell)
  uid: ExcelScript!ExcelScript.Range#getRangeEdge:member(1)
  package: ExcelScript!
  fullName: getRangeEdge(direction, activeCell)
  summary: Renvoie un objet de plage qui est la cellule de périphérie de la région de données qui correspond à la direction fournie. Cela correspond au comportement de la touche Ctrl+Flèche dans l’interface utilisateur Excel sur Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      getRangeEdge(
                  direction: KeyboardDirection,
                  activeCell?: Range | string
              ): Range;
    parameters:
    - id: direction
      description: Direction de la cellule active.
      type: <xref uid="ExcelScript!ExcelScript.KeyboardDirection:enum" />
    - id: activeCell
      description: Cellule active de cette plage. Par défaut, la cellule active est la cellule supérieure gauche de la plage. Une erreur est générée si la cellule active ne se trouve pas dans cette plage.
      type: "<xref uid=\"ExcelScript!ExcelScript.Range:interface\" /> | string\n        "
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script adds the value \"Total\" after the end of the first column.\n */\nfunction main(workbook: ExcelScript.Workbook)\n{\n  // Get the current worksheet.\n  let selectedSheet = workbook.getActiveWorksheet();\n\n  // Get the last used cell at the end of the column.\n  // This recreates the Ctrl+Down arrow key behavior.\n  let firstCell = selectedSheet.getRange(\"A1\");\n  let firstColumn = selectedSheet.getRange(\"A1\").getRangeEdge(ExcelScript.KeyboardDirection.down);\n  let cellAfter = firstColumn.getOffsetRange(1, 0);\n\n  // Set the value of the cell after the current end of the used column to \"Total\".\n  cellAfter.setValue(\"Total\");\n}\n```"
- name: getResizedRange(deltaRows, deltaColumns)
  uid: ExcelScript!ExcelScript.Range#getResizedRange:member(1)
  package: ExcelScript!
  fullName: getResizedRange(deltaRows, deltaColumns)
  summary: Obtient un `Range` objet similaire à l’objet actuel `Range` , mais avec son coin inférieur droit développé (ou contracté) par un certain nombre de lignes et de colonnes.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResizedRange(deltaRows: number, deltaColumns: number): Range;'
    parameters:
    - id: deltaRows
      description: Nombre de lignes par lequel développer le coin inférieur droit, par rapport à la plage actuelle. Utilisez un nombre positif pour étendre la plage ou un nombre négatif pour la réduire.
      type: number
    - id: deltaColumns
      description: Nombre de colonnes par lesquelles développer le coin inférieur droit, par rapport à la plage actuelle. Utilisez un nombre positif pour étendre la plage ou un nombre négatif pour la réduire.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script copies the formatting in the active cell to the neighboring cells.\n * Note that this script only works when the active cell isn't on an edge of the worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the active cell.\n  let activeCell = workbook.getActiveCell();\n\n  // Get the cell that's one row above and one column to the left of the active cell.\n  let cornerCell = activeCell.getOffsetRange(-1,-1);\n\n  // Get a range that includes all the cells surrounding the active cell.\n  let surroundingRange = cornerCell.getResizedRange(2, 2)\n\n  // Copy the formatting from the active cell to the new range.\n  surroundingRange.copyFrom(\n    activeCell, /* The source range. */\n    ExcelScript.RangeCopyType.formats /* What to copy. */\n  );\n}\n```"
- name: getRow(row)
  uid: ExcelScript!ExcelScript.Range#getRow:member(1)
  package: ExcelScript!
  fullName: getRow(row)
  summary: Obtient une ligne contenue dans la plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRow(row: number): Range;'
    parameters:
    - id: row
      description: Numéro de ligne de la plage à récupérer. Avec indice zéro.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getRowCount()
  uid: ExcelScript!ExcelScript.Range#getRowCount:member(1)
  package: ExcelScript!
  fullName: getRowCount()
  summary: Renvoie le nombre total de lignes de la plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowCount(): number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This sample provides the count of negative numbers that are present\n * in the used range of the current worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the working range.\n  let usedRange = workbook.getActiveWorksheet().getUsedRange();\n  let rowCount = usedRange.getRowCount();\n  let columnCount = usedRange.getColumnCount();\n\n  // Save the values locally to avoid repeatedly asking the workbook.\n  let usedRangeValues = usedRange.getValues();\n\n  // Start the negative number counter.\n  let negativeCount = 0;\n\n  // Iterate over the entire range looking for negative numbers.\n  for (let i = 0; i < rowCount; i++) {\n    for (let j = 0; j < columnCount; j++) {\n      if (usedRangeValues[i][j] < 0) {\n        negativeCount++;\n      }\n    }\n  }\n\n  // Log the negative number count to the console.\n  console.log(negativeCount);\n}\n```"
- name: getRowHidden()
  uid: ExcelScript!ExcelScript.Range#getRowHidden:member(1)
  package: ExcelScript!
  fullName: getRowHidden()
  summary: Représente si toutes les lignes de la plage active sont masquées. La valeur est `true` lorsque toutes les lignes d’une plage sont masquées. La valeur est quand aucune ligne de la plage n’est `false` masquée. La valeur est `null` lorsque certaines lignes d’une plage sont masquées et que d’autres lignes de la même plage ne sont pas masquées.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowHidden(): boolean;'
    return:
      type: boolean
      description: ''
- name: getRowIndex()
  uid: ExcelScript!ExcelScript.Range#getRowIndex:member(1)
  package: ExcelScript!
  fullName: getRowIndex()
  summary: Renvoie le numéro de ligne de la première cellule de la plage. Avec indice zéro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowIndex(): number;'
    return:
      type: number
      description: ''
- name: getRowsAbove(count)
  uid: ExcelScript!ExcelScript.Range#getRowsAbove:member(1)
  package: ExcelScript!
  fullName: getRowsAbove(count)
  summary: Obtient un certain nombre de lignes au-dessus de l’objet actuel `Range` .
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowsAbove(count?: number): Range;'
    parameters:
    - id: count
      description: Facultatif. Nombre de lignes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getRowsBelow(count)
  uid: ExcelScript!ExcelScript.Range#getRowsBelow:member(1)
  package: ExcelScript!
  fullName: getRowsBelow(count)
  summary: Obtient un certain nombre de lignes sous l’objet actuel `Range` .
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowsBelow(count?: number): Range;'
    parameters:
    - id: count
      description: Facultatif. Nombre de lignes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getSavedAsArray()
  uid: ExcelScript!ExcelScript.Range#getSavedAsArray:member(1)
  package: ExcelScript!
  fullName: getSavedAsArray()
  summary: Représente si toutes les cellules seraient enregistrées sous forme de formule matricielle. Renvoie si toutes les cellules sont enregistrées `true` sous forme de formule matricielle ou `false` si toutes les cellules ne sont pas enregistrées sous forme de formule matricielle. Retourne si certaines cellules sont enregistrées `null` sous forme de formule matricielle et d’autres non.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSavedAsArray(): boolean;'
    return:
      type: boolean
      description: ''
- name: getSort()
  uid: ExcelScript!ExcelScript.Range#getSort:member(1)
  package: ExcelScript!
  fullName: getSort()
  summary: Représente le tri de plage de la plage actuelle.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSort(): RangeSort;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeSort:interface" />
      description: ''
- name: getSpecialCells(cellType, cellValueType)
  uid: ExcelScript!ExcelScript.Range#getSpecialCells:member(1)
  package: ExcelScript!
  fullName: getSpecialCells(cellType, cellValueType)
  summary: Obtient l’objet `RangeAreas` , comprenant une ou plusieurs plages, qui représente toutes les cellules qui correspondent au type et à la valeur spécifiés. Si aucune cellule spéciale n’est trouvée, cette méthode retourne `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      getSpecialCells(
                  cellType: SpecialCellType,
                  cellValueType?: SpecialCellValueType
              ): RangeAreas;
    parameters:
    - id: cellType
      description: Type de cellules à inclure.
      type: <xref uid="ExcelScript!ExcelScript.SpecialCellType:enum" />
    - id: cellValueType
      description: Si `cellType` l’un ou l’autre `constants` est `formulas`<!-- -->, cet argument est utilisé pour déterminer les types de cellules à inclure dans le résultat. Ces valeurs peuvent être combinées pour retourner plusieurs types. Par défaut, toutes les constantes ou formules sont sélectionnées, quel qu'en soit le type.
      type: <xref uid="ExcelScript!ExcelScript.SpecialCellValueType:enum" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This sample gets all the blank cells in the current worksheet's used range. It then highlights all those cells with a yellow background.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n    // Get the current used range.\n    let range = workbook.getActiveWorksheet().getUsedRange();\n    \n    // Get all the blank cells.\n    let blankCells = range.getSpecialCells(ExcelScript.SpecialCellType.blanks);\n    // Highlight the blank cells with a yellow background.\n    blankCells.getFormat().getFill().setColor(\"yellow\");\n}\n```"
- name: getSpillingToRange()
  uid: ExcelScript!ExcelScript.Range#getSpillingToRange:member(1)
  package: ExcelScript!
  fullName: getSpillingToRange()
  summary: Obtient l’objet de la plage contenant la plage renversé lorsque appelée sur une cellule d’ancrage. Si la plage n’est pas une cellule d’ancrage ou si la plage de débordement est introuvable, cette méthode retourne `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpillingToRange(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getSpillParent()
  uid: ExcelScript!ExcelScript.Range#getSpillParent:member(1)
  package: ExcelScript!
  fullName: getSpillParent()
  summary: Obtient l’objet de plage contenant la cellule d’ancrage dans laquelle la cellule s’est renversée. S’il ne s’agit pas d’une cellule renversée ou si plusieurs cellules sont données, cette méthode retourne `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpillParent(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getSurroundingRegion()
  uid: ExcelScript!ExcelScript.Range#getSurroundingRegion:member(1)
  package: ExcelScript!
  fullName: getSurroundingRegion()
  summary: Renvoie un `Range` objet qui représente la région environnante pour la cellule supérieure gauche de cette plage. Une région environnante est une plage délimitée par une combinaison de lignes et de colonnes vides par rapport à cette plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSurroundingRegion(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getTables(fullyContained)
  uid: ExcelScript!ExcelScript.Range#getTables:member(1)
  package: ExcelScript!
  fullName: getTables(fullyContained)
  summary: Obtient une collection de tableaux qui se chevauchent avec la plage dans l’étendue.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTables(fullyContained?: boolean): Table[];'
    parameters:
    - id: fullyContained
      description: Si `true`<!-- -->, retourne uniquement les tables qui sont entièrement contenues dans les limites de la plage. La valeur par défaut est `false`<!-- -->.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Table:interface" />[]
      description: ''
- name: getText()
  uid: ExcelScript!ExcelScript.Range#getText:member(1)
  package: ExcelScript!
  fullName: getText()
  summary: Représente la valeur Text de la plage spécifiée. La valeur de texte ne dépend pas de la largeur de la cellule. La \# substitution de signe qui se produit dans l’interface utilisateur Excel n’affecte pas la valeur de texte retournée par l’API. Si la plage contient plusieurs cellules, les données de la première cellule (représentées par l’index de ligne 0 et l’index de colonne de 0) sont retournées.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getText(): string;'
    return:
      type: string
      description: ''
- name: getTexts()
  uid: ExcelScript!ExcelScript.Range#getTexts:member(1)
  package: ExcelScript!
  fullName: getTexts()
  summary: Valeurs de texte de la plage spécifiée. La valeur de texte ne dépend pas de la largeur de la cellule. La substitution de signe numérique (\#) qui se produit dans l’interface utilisateur Excel n’affecte pas la valeur de texte retournée par l’API.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTexts(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getTop()
  uid: ExcelScript!ExcelScript.Range#getTop:member(1)
  package: ExcelScript!
  fullName: getTop()
  summary: Renvoie la distance en points, pour un zoom de 100 %, entre le bord supérieur de la feuille de calcul et le bord supérieur de la plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTop(): number;'
    return:
      type: number
      description: ''
- name: getUsedRange(valuesOnly)
  uid: ExcelScript!ExcelScript.Range#getUsedRange:member(1)
  package: ExcelScript!
  fullName: getUsedRange(valuesOnly)
  summary: Renvoie la plage utilisée d’un objet de plage donné. S’il n’existe aucune cellule utilisée dans la plage, cette méthode retourne `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Range;'
    parameters:
    - id: valuesOnly
      description: Prend uniquement en compte les cellules avec des valeurs sous forme de cellules utilisées.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getValue()
  uid: ExcelScript!ExcelScript.Range#getValue:member(1)
  package: ExcelScript!
  fullName: getValue()
  summary: Représente la valeur brute de la plage spécifiée. Les données renvoyées peuvent être des chaînes, des valeurs numériques ou des valeurs booléennes. Une cellule contenant une erreur renvoie la chaîne d’erreur. Si la plage contient plusieurs cellules, les données de la première cellule (représentées par l’index de ligne 0 et l’index de colonne de 0) sont retournées.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getValue(): string | number | boolean;'
    return:
      type: string | number | boolean
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This sample reads the value of A1 and prints it to the console.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current worksheet.\n  let selectedSheet = workbook.getActiveWorksheet();\n\n  // Get the value of cell A1.\n  let range = selectedSheet.getRange(\"A1\");\n  \n  // Print the value of A1.\n  console.log(range.getValue());\n}\n```"
- name: getValues()
  uid: ExcelScript!ExcelScript.Range#getValues:member(1)
  package: ExcelScript!
  fullName: getValues()
  summary: Représente les valeurs brutes de la plage spécifiée. Les données retournées peuvent être une chaîne, un nombre ou une valeur booléenne. Les cellules contenant une erreur renvoie la chaîne d’erreur. Si la valeur retournée commence par un signe plus (« + »), moins (« -« ) ou un signe égal (« = »), Excel interprète cette valeur comme une formule.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getValues(): (string | number | boolean)[][];'
    return:
      type: (string | number | boolean)[][]
      description: ''
- name: getValueType()
  uid: ExcelScript!ExcelScript.Range#getValueType:member(1)
  package: ExcelScript!
  fullName: getValueType()
  summary: Représente le type de données dans la cellule. Si la plage contient plusieurs cellules, les données de la première cellule (représentées par l’index de ligne 0 et l’index de colonne de 0) sont retournées.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getValueType(): RangeValueType;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeValueType:enum" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script formats rows in a worksheet based on the first value in that row. \n * If it's the boolean value TRUE, the row is bolded. \n * If it's FALSE, nothing is changed. \n * If the value type isn't a boolean, the row is italicized.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the used range in the active worksheet.\n  const sheet = workbook.getActiveWorksheet();\n  const usedRange = sheet.getUsedRange();\n\n  // Get the values in the first column.\n  const firstColumnValues = usedRange.getColumn(0).getValues();\n\n  // Look at the first cell in each row.\n  const rowCount = usedRange.getRowCount();\n  for (let i = 0; i < rowCount; i++) {\n    // Get the type of the first cell to make sure it's a boolean.\n    let firstValueType = usedRange.getCell(i, 0).getValueType();\n\n    // Set the bold or italic of the row as described earlier.\n    if (firstValueType === ExcelScript.RangeValueType.boolean) {\n      if (firstColumnValues[i][0] as boolean === true) {\n        usedRange.getRow(i).getFormat().getFont().setBold(true);\n      } else {\n        usedRange.getRow(i).getFormat().getFont().setBold(false);\n      }\n    } else {\n      usedRange.getRow(i).getFormat().getFont().setItalic(true);\n    }\n  }\n}\n```"
- name: getValueTypes()
  uid: ExcelScript!ExcelScript.Range#getValueTypes:member(1)
  package: ExcelScript!
  fullName: getValueTypes()
  summary: Spécifie le type de données dans chaque cellule.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getValueTypes(): RangeValueType[][];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeValueType:enum" />[][]
      description: ''
- name: getVisibleView()
  uid: ExcelScript!ExcelScript.Range#getVisibleView:member(1)
  package: ExcelScript!
  fullName: getVisibleView()
  summary: Représente les lignes visibles de la plage en cours.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getVisibleView(): RangeView;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeView:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script copies values and formatting from the visible range of a table in Sheet1 into Sheet2.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the filtered data from Sheet1.\n  const currentSheet = workbook.getWorksheet(\"Sheet1\");\n  const table = currentSheet.getTables()[0];\n  const source = table.getRange().getVisibleView().getRange();\n  \n  // Copy the data into the other sheet.\n  const otherSheet = workbook.getWorksheet(\"Sheet2\");\n  const otherRangeCorner = otherSheet.getRange(\"A1\");\n  otherRangeCorner.copyFrom(source, ExcelScript.RangeCopyType.all);\n}\n```"
- name: getWidth()
  uid: ExcelScript!ExcelScript.Range#getWidth:member(1)
  package: ExcelScript!
  fullName: getWidth()
  summary: Renvoie la distance en points, pour un zoom de 100 %, entre le bord gauche de la plage et le bord droit de la plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWidth(): number;'
    return:
      type: number
      description: ''
- name: getWorksheet()
  uid: ExcelScript!ExcelScript.Range#getWorksheet:member(1)
  package: ExcelScript!
  fullName: getWorksheet()
  summary: Feuille de calcul contenant la plage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWorksheet(): Worksheet;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: group(groupOption)
  uid: ExcelScript!ExcelScript.Range#group:member(1)
  package: ExcelScript!
  fullName: group(groupOption)
  summary: Regroupe les colonnes et les lignes pour un plan.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'group(groupOption: GroupOption): void;'
    parameters:
    - id: groupOption
      description: Spécifie comment la plage peut être regroupée par lignes ou colonnes. Une `InvalidArgument` erreur est générée lorsque l’option de groupe diffère de la plage ou `isEntireColumn` de `isEntireRow` la propriété (c’est-à-dire, `range.isEntireRow` est vraie et `groupOption` est « ByColumns » ou `range.isEntireColumn` true et `groupOption` est « ByRows »).
      type: <xref uid="ExcelScript!ExcelScript.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: hideGroupDetails(groupOption)
  uid: ExcelScript!ExcelScript.Range#hideGroupDetails:member(1)
  package: ExcelScript!
  fullName: hideGroupDetails(groupOption)
  summary: Masque les détails du groupe de lignes ou de colonnes.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'hideGroupDetails(groupOption: GroupOption): void;'
    parameters:
    - id: groupOption
      description: Spécifie s’il faut masquer les détails des lignes groupées ou des colonnes groupées.
      type: <xref uid="ExcelScript!ExcelScript.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: insert(shift)
  uid: ExcelScript!ExcelScript.Range#insert:member(1)
  package: ExcelScript!
  fullName: insert(shift)
  summary: Insère une cellule ou une plage de cellules dans la feuille de calcul à la place d’une plage donnée et décale les autres cellules pour libérer de l’espace. Renvoie un nouvel `Range` objet à l’espace désormais vide.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insert(shift: InsertShiftDirection): Range;'
    parameters:
    - id: shift
      description: Indique la façon dont les cellules doivent être décalées. Voir `ExcelScript.InsertShiftDirection` pour plus d’informations.
      type: <xref uid="ExcelScript!ExcelScript.InsertShiftDirection:enum" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script inserts headers at the top of the worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook)\n{\n  let currentSheet = workbook.getActiveWorksheet();\n\n  // Create headers for 3 columns.\n  let myHeaders = [[\"NAME\", \"ID\", \"ROLE\"]];\n\n  // Add a blank first row and push existing data down a row.\n  let firstRow = currentSheet.getRange(\"1:1\");\n  firstRow.insert(ExcelScript.InsertShiftDirection.down);\n\n  // Add the headers.\n  currentSheet.getRange(\"A1:C1\").setValues(myHeaders);\n}\n```"
- name: merge(across)
  uid: ExcelScript!ExcelScript.Range#merge:member(1)
  package: ExcelScript!
  fullName: merge(across)
  summary: Fusionne la plage de cellules dans une zone de la feuille de calcul.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'merge(across?: boolean): void;'
    parameters:
    - id: across
      description: Facultatif. Définir `true` pour fusionner des cellules dans chaque ligne de la plage spécifiée en tant que cellules fusionnées distinctes. La valeur par défaut est `false`<!-- -->.
      type: boolean
    return:
      type: void
      description: ''
- name: moveTo(destinationRange)
  uid: ExcelScript!ExcelScript.Range#moveTo:member(1)
  package: ExcelScript!
  fullName: moveTo(destinationRange)
  summary: Déplace les valeurs de cellule, la mise en forme et les formules de la plage actuelle vers la plage de destination, en remplaçant les anciennes informations contenues dans ces cellules. La plage de destination sera développée automatiquement si elle est inférieure à la plage actuelle. Les cellules de la plage de destination qui se trouvent en dehors de la zone de la plage d’origine ne sont pas modifiées.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'moveTo(destinationRange: Range | string): void;'
    parameters:
    - id: destinationRange
      description: destinationRange Spécifie la plage vers laquelle les informations de cette plage seront déplacées.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    return:
      type: void
      description: ''
- name: removeDuplicates(columns, includesHeader)
  uid: ExcelScript!ExcelScript.Range#removeDuplicates:member(1)
  package: ExcelScript!
  fullName: removeDuplicates(columns, includesHeader)
  summary: Supprime les valeurs dupliquées de la plage spécifiée par les colonnes.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      removeDuplicates(
                  columns: number[],
                  includesHeader: boolean
              ): RemoveDuplicatesResult;
    parameters:
    - id: columns
      description: Colonnes à l’intérieur de la plage qui peuvent contenir des doublons. Au moins une colonne doit être spécifiée. Avec indice zéro.
      type: number[]
    - id: includesHeader
      description: True si les données d’entrée contiennent un en-tête. La valeur par défaut est False.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.RemoveDuplicatesResult:interface" />
      description: ''
- name: replaceAll(text, replacement, criteria)
  uid: ExcelScript!ExcelScript.Range#replaceAll:member(1)
  package: ExcelScript!
  fullName: replaceAll(text, replacement, criteria)
  summary: Détecte et remplace la chaîne donnée basée sur les critères spécifiés dans la plage active.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      replaceAll(
                  text: string,
                  replacement: string,
                  criteria: ReplaceCriteria
              ): number;
    parameters:
    - id: text
      description: Chaîne à rechercher.
      type: string
    - id: replacement
      description: Chaîne qui remplace la chaîne d’origine.
      type: string
    - id: criteria
      description: Critères de remplacement supplémentaires.
      type: <xref uid="ExcelScript!ExcelScript.ReplaceCriteria:interface" />
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script searches through a table column and replaces  \n * cells marked \"monthly special\" with \"parsnip\".\n * This script uses Range.replaceAll instead of Worksheet.replaceAll\n * to limit the search to a specific range.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the range of a table named \"Orders\".\n  let table = workbook.getTable(\"Orders\");\n  let range = table.getColumnByName(\"Vegetable\").getRange();\n  \n  // Change the value of any cells with the value \"monthly special\".\n  range.replaceAll(\"monthly special\", \"parsnip\", {completeMatch: true});\n}\n```"
- name: select()
  uid: ExcelScript!ExcelScript.Range#select:member(1)
  package: ExcelScript!
  fullName: select()
  summary: Sélectionne la plage spécifiée dans l’interface utilisateur d’Excel.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'select(): void;'
    return:
      type: void
      description: ''
- name: setColumnHidden(columnHidden)
  uid: ExcelScript!ExcelScript.Range#setColumnHidden:member(1)
  package: ExcelScript!
  fullName: setColumnHidden(columnHidden)
  summary: Représente si toutes les colonnes de la plage active sont masquées. La valeur est `true` lorsque toutes les colonnes d’une plage sont masquées. La valeur est quand aucune colonne de la plage n’est `false` masquée. La valeur est `null` lorsque certaines colonnes d’une plage sont masquées et que d’autres colonnes de la même plage ne sont pas masquées.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setColumnHidden(columnHidden: boolean): void;'
    parameters:
    - id: columnHidden
      description: ''
      type: boolean
    return:
      type: void
      description: ''
- name: setDirty()
  uid: ExcelScript!ExcelScript.Range#setDirty:member(1)
  package: ExcelScript!
  fullName: setDirty()
  summary: Cette méthode désigne une plage qui doit être recalculée lorsque le recalcul suivant se produit.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDirty(): void;'
    return:
      type: void
      description: ''
- name: setFormula(formula)
  uid: ExcelScript!ExcelScript.Range#setFormula:member(1)
  package: ExcelScript!
  fullName: setFormula(formula)
  summary: Définit la formule de cellule en notation de style A1. Si la plage contient plusieurs cellules, chaque cellule de la plage donnée sera mise à jour avec les données d’entrée.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormula(formula: string): void;'
    parameters:
    - id: formula
      description: ''
      type: string
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/*\n * This script sets a cell's formula, \n * then displays how Excel stores the cell's formula and value separately.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  let selectedSheet = workbook.getActiveWorksheet();\n\n  // Set A1 to 2.\n  let a1 = selectedSheet.getRange(\"A1\");\n  a1.setValue(2);\n\n  // Set B1 to the formula =(2*A1), which should equal 4.\n  let b1 = selectedSheet.getRange(\"B1\")\n  b1.setFormula(\"=(2*A1)\");\n\n  // Log the current results for `getFormula` and `getValue` at B1.\n  console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);\n}\n```"
- name: setFormulaLocal(formulaLocal)
  uid: ExcelScript!ExcelScript.Range#setFormulaLocal:member(1)
  package: ExcelScript!
  fullName: setFormulaLocal(formulaLocal)
  summary: Définissez la formule de cellule en notation de style A1, dans la langue de l’utilisateur et dans les paramètres régionaux de mise en forme des nombres. Par exemple, la formule « =SUM(A1, 1.5) » en anglais deviendrait « =SUMME(A1; 1,5) » en allemand. Si la plage contient plusieurs cellules, chaque cellule de la plage donnée sera mise à jour avec les données d’entrée.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormulaLocal(formulaLocal: string): void;'
    parameters:
    - id: formulaLocal
      description: ''
      type: string
    return:
      type: void
      description: ''
- name: setFormulaR1C1(formulaR1C1)
  uid: ExcelScript!ExcelScript.Range#setFormulaR1C1:member(1)
  package: ExcelScript!
  fullName: setFormulaR1C1(formulaR1C1)
  summary: Définit la formule de cellule en notation de style R1C1. Si la plage contient plusieurs cellules, chaque cellule de la plage donnée sera mise à jour avec les données d’entrée.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormulaR1C1(formulaR1C1: string): void;'
    parameters:
    - id: formulaR1C1
      description: ''
      type: string
    return:
      type: void
      description: ''
- name: setFormulas(formulas)
  uid: ExcelScript!ExcelScript.Range#setFormulas:member(1)
  package: ExcelScript!
  fullName: setFormulas(formulas)
  summary: Représente la formule dans le style de notation A1. Si une cellule n’a pas de formule, sa valeur est retournée à la place.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormulas(formulas: string[][]): void;'
    parameters:
    - id: formulas
      description: ''
      type: string[][]
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script sets the values of a range, then adds SUM formulas to calcuate\n * the totals for each row of that range. \n */\nfunction main(workbook: ExcelScript.Workbook)\n{\n  let currentSheet = workbook.getActiveWorksheet();\n\n  // Set the values of a range.\n  let values = [[1, 2, 4], [8, 16, 32], [64, 128, 256]];\n  let valueRange = currentSheet.getRange(\"A1:C3\");\n  valueRange.setValues(values);\n\n  // Set the formulas of a range.\n  let formulas = [[\"=SUM(A1:C1)\"], [\"=SUM(A2:C2)\"], [\"=SUM(A3:C3)\"]];\n  let formulaRange = currentSheet.getRange(\"D1:D3\");\n  formulaRange.setFormulas(formulas);\n}\n```"
- name: setFormulasLocal(formulasLocal)
  uid: ExcelScript!ExcelScript.Range#setFormulasLocal:member(1)
  package: ExcelScript!
  fullName: setFormulasLocal(formulasLocal)
  summary: Représente la formule en notation A1, en utilisant le langage et les paramètres de format de nombre régionaux de l’utilisateur. Par exemple, la formule « =SUM(A1, 1.5) » en anglais deviendrait « =SUMME(A1; 1,5) » en allemand. Si une cellule n’a pas de formule, sa valeur est retournée à la place.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormulasLocal(formulasLocal: string[][]): void;'
    parameters:
    - id: formulasLocal
      description: ''
      type: string[][]
    return:
      type: void
      description: ''
- name: setFormulasR1C1(formulasR1C1)
  uid: ExcelScript!ExcelScript.Range#setFormulasR1C1:member(1)
  package: ExcelScript!
  fullName: setFormulasR1C1(formulasR1C1)
  summary: Représente la formule dans le style de notation R1C1. Si une cellule n’a pas de formule, sa valeur est retournée à la place.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormulasR1C1(formulasR1C1: string[][]): void;'
    parameters:
    - id: formulasR1C1
      description: ''
      type: string[][]
    return:
      type: void
      description: ''
- name: setHyperlink(hyperlink)
  uid: ExcelScript!ExcelScript.Range#setHyperlink:member(1)
  package: ExcelScript!
  fullName: setHyperlink(hyperlink)
  summary: Représente le lien hypertexte de la plage actuelle.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setHyperlink(hyperlink: RangeHyperlink): void;'
    parameters:
    - id: hyperlink
      description: ''
      type: <xref uid="ExcelScript!ExcelScript.RangeHyperlink:interface" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/** \n * This script inserts a hyperlink to the first cell of the last worksheet in the workbook.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the active cell.\n  let cell = workbook.getActiveCell();\n\n  // Get the last worksheet in the workbook.\n  // Note that this might be the current sheet if there's only one worksheet.\n  let lastSheet = workbook.getLastWorksheet();\n\n  // Get sheet name. \n  let linkedSheetName = lastSheet.getName();\n  console.log(`Setting hyperlink of ${cell.getAddress()} to the ${linkedSheetName} sheet's A1 cell`);\n\n  // Set the text for the hyperlink.\n  let value = `Click to go to: ${linkedSheetName}`;\n\n  // Create the hyperlink using that cell's value.\n  cell.setHyperlink({\n    textToDisplay: value.toString(),\n    screenTip: `Navigate to ${linkedSheetName}`,\n    documentReference: `${linkedSheetName}!A1`\n  });\n}\n```"
- name: setNumberFormat(numberFormat)
  uid: ExcelScript!ExcelScript.Range#setNumberFormat:member(1)
  package: ExcelScript!
  fullName: setNumberFormat(numberFormat)
  summary: Définit le code de format de numéro Excel de cellule pour la plage donnée. Si la plage contient plusieurs cellules, chaque cellule de la plage donnée sera mise à jour avec les données d’entrée.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setNumberFormat(numberFormat: string): void;'
    parameters:
    - id: numberFormat
      description: ''
      type: string
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script sets the number format in column C to show the data as a percentage.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  const  selectedSheet = workbook.getActiveWorksheet();\n  \n  // Set number format for column C to a percentage that rounds to the nearest percentage point.\n  selectedSheet.getRange(\"C:C\").setNumberFormat(\"0%\");\n}\n```"
- name: setNumberFormatLocal(numberFormatLocal)
  uid: ExcelScript!ExcelScript.Range#setNumberFormatLocal:member(1)
  package: ExcelScript!
  fullName: setNumberFormatLocal(numberFormatLocal)
  summary: Définit le code de format de numéro Excel de cellule pour la plage donnée, en fonction des paramètres de langue de l’utilisateur. Excel n’effectue aucune contrainte de langue ou de format lors de l’obtention ou de la définition de la `numberFormatLocal` propriété. Tout texte renvoyé utilise les chaînes mises en forme localement en fonction de la langue spécifiée dans les paramètres système. Si la plage contient plusieurs cellules, chaque cellule de la plage donnée sera mise à jour avec les données d’entrée.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setNumberFormatLocal(numberFormatLocal: string): void;'
    parameters:
    - id: numberFormatLocal
      description: ''
      type: string
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script sets the number format in column D to show the data as a percentage with a decimal.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  const  selectedSheet = workbook.getActiveWorksheet();\n  \n  // Set number format for column D to a percentage that rounds to the nearest tenth of a percentage.\n  selectedSheet.getRange(\"D:D\").setNumberFormatLocal(\"0.0%\");\n}\n```"
- name: setNumberFormats(numberFormats)
  uid: ExcelScript!ExcelScript.Range#setNumberFormats:member(1)
  package: ExcelScript!
  fullName: setNumberFormats(numberFormats)
  summary: Représente le code de format numérique d’Excel pour la plage donnée.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setNumberFormats(numberFormats: string[][]): void;'
    parameters:
    - id: numberFormats
      description: ''
      type: string[][]
    return:
      type: void
      description: ''
- name: setNumberFormatsLocal(numberFormatsLocal)
  uid: ExcelScript!ExcelScript.Range#setNumberFormatsLocal:member(1)
  package: ExcelScript!
  fullName: setNumberFormatsLocal(numberFormatsLocal)
  summary: Représente le code de format numérique d’Excel pour la plage donnée, en fonction des paramètres de langue de l’utilisateur. Excel n’effectue aucune contrainte de langue ou de format lors de l’obtention ou de la définition de la `numberFormatLocal` propriété. Tout texte renvoyé utilise les chaînes mises en forme localement en fonction de la langue spécifiée dans les paramètres système.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setNumberFormatsLocal(numberFormatsLocal: string[][]): void;'
    parameters:
    - id: numberFormatsLocal
      description: ''
      type: string[][]
    return:
      type: void
      description: ''
- name: setPredefinedCellStyle(predefinedCellStyle)
  uid: ExcelScript!ExcelScript.Range#setPredefinedCellStyle:member(1)
  package: ExcelScript!
  fullName: setPredefinedCellStyle(predefinedCellStyle)
  summary: Représente le style de la plage actuelle. Si les styles des cellules sont incohérents, `null` ils sont retournés. Pour les styles personnalisés, le nom du style est retourné. Pour les styles intégrés, une chaîne représentant une valeur dans l’énumération `BuiltInStyle` est retournée.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setPredefinedCellStyle(predefinedCellStyle: string): void;'
    parameters:
    - id: predefinedCellStyle
      description: ''
      type: string
    return:
      type: void
      description: ''
- name: setRowHidden(rowHidden)
  uid: ExcelScript!ExcelScript.Range#setRowHidden:member(1)
  package: ExcelScript!
  fullName: setRowHidden(rowHidden)
  summary: Représente si toutes les lignes de la plage active sont masquées. La valeur est `true` lorsque toutes les lignes d’une plage sont masquées. La valeur est quand aucune ligne de la plage n’est `false` masquée. La valeur est `null` lorsque certaines lignes d’une plage sont masquées et que d’autres lignes de la même plage ne sont pas masquées.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setRowHidden(rowHidden: boolean): void;'
    parameters:
    - id: rowHidden
      description: ''
      type: boolean
    return:
      type: void
      description: ''
- name: setValue(value)
  uid: ExcelScript!ExcelScript.Range#setValue:member(1)
  package: ExcelScript!
  fullName: setValue(value)
  summary: Définit la valeur brute de la plage spécifiée. Les données en cours de définition peuvent être de type chaîne, nombre ou booléen. `null` valeur sera ignorée (non définie ou remplacée dans Excel). Si la plage contient plusieurs cellules, chaque cellule de la plage donnée sera mise à jour avec les données d’entrée.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setValue(value: any): void;'
    parameters:
    - id: value
      description: ''
      type: any
    return:
      type: void
      description: ''
- name: setValues(values)
  uid: ExcelScript!ExcelScript.Range#setValues:member(1)
  package: ExcelScript!
  fullName: setValues(values)
  summary: Définit les valeurs brutes de la plage spécifiée. Les données fournies peuvent être une chaîne, un nombre ou une valeur booléenne. Si la valeur fournie commence par un signe plus (« + »), moins (« -« ) ou un signe égal (« = »), Excel interprète cette valeur comme une formule.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setValues(values: (string | number | boolean)[][]): void;'
    parameters:
    - id: values
      description: ''
      type: (string | number | boolean)[][]
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This sample inserts some pre-loaded data into a range.\n * It also shows how to get a range that fits the data.\n */\n function main(workbook: ExcelScript.Workbook) {\n   // Get the active cell.\n   let currentCell = workbook.getActiveCell();\n   \n   // Calculate the range needed to fit the given data.\n   let targetRange = currentCell.getResizedRange(DATA.length - 1, DATA[0].length - 1);\n\n   // Set range values to the data.\n   targetRange.setValues(DATA);\n\n   // Autofit the columns so the worksheet is readable. \n   targetRange.getFormat().autofitColumns();\n }\n\n /* \n  * This sample's data is in a static 2-dimensional array.\n  * You could also get the input from other ranges or sources.\n  * Note that each row must have the same number of columns to be valid. \n  */\n const DATA = [\n   ['Date', 'Salesperson', 'Product', 'Amount']\n   , ['3/2/2020', 'Anne', 'Pizza', '$1400']\n   , ['3/2/2020', 'Mariya', 'Pizza', '$1700']\n   , ['3/7/2020', 'Mark', 'Sandwiches', '$1010']\n   , ['3/24/2020', 'Anne', 'Pizza', '$750']\n   , ['3/28/2020', 'Mark', 'Salads', '$510']\n   , ['4/17/2020', 'Laura', 'Salads', '$900']\n   , ['4/17/2020', 'Mariya', 'Salads', '$1600']\n   , ['4/28/2020', 'Laura', 'Sandwiches', '$680']\n ];\n```"
- name: showCard()
  uid: ExcelScript!ExcelScript.Range#showCard:member(1)
  package: ExcelScript!
  fullName: showCard()
  summary: Affiche la carte pour une cellule active si son contenu est riche en valeur.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showCard(): void;'
    return:
      type: void
      description: ''
- name: showGroupDetails(groupOption)
  uid: ExcelScript!ExcelScript.Range#showGroupDetails:member(1)
  package: ExcelScript!
  fullName: showGroupDetails(groupOption)
  summary: Affiche les détails du groupe de lignes ou de colonnes.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showGroupDetails(groupOption: GroupOption): void;'
    parameters:
    - id: groupOption
      description: Spécifie s’il faut afficher les détails des lignes groupées ou des colonnes groupées.
      type: <xref uid="ExcelScript!ExcelScript.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: ungroup(groupOption)
  uid: ExcelScript!ExcelScript.Range#ungroup:member(1)
  package: ExcelScript!
  fullName: ungroup(groupOption)
  summary: Dissocie les colonnes et les lignes d’un plan.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ungroup(groupOption: GroupOption): void;'
    parameters:
    - id: groupOption
      description: Spécifie comment la plage peut être dissociée par des lignes ou des colonnes.
      type: <xref uid="ExcelScript!ExcelScript.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: unmerge()
  uid: ExcelScript!ExcelScript.Range#unmerge:member(1)
  package: ExcelScript!
  fullName: unmerge()
  summary: Annule la fusion de la plage de cellules.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'unmerge(): void;'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 8fbc16219f48862902e9d28ced8dbe1be1e67a8c
  ms.sourcegitcommit: 1c3f24cda5e255ddb9dd7741f4af26ea0ad9922e
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 07/20/2022
  ms.locfileid: "66890559"
