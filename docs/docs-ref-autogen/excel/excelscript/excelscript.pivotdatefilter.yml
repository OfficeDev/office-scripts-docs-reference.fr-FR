### YamlMime:TSType
name: ExcelScript.PivotDateFilter
uid: ExcelScript!ExcelScript.PivotDateFilter:interface
package: ExcelScript!
fullName: ExcelScript.PivotDateFilter
summary: Modèle configurable pour un filtre de dates à appliquer à un champ de tableau croisé dynamique. Définit `condition` les critères à définir pour que le filtre fonctionne.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: comparator
  uid: ExcelScript!ExcelScript.PivotDateFilter#comparator:member
  package: ExcelScript!
  fullName: comparator
  summary: Le comparateur est la valeur statique à laquelle d’autres valeurs sont comparées. Le type de comparaison est défini par la condition.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'comparator?: FilterDatetime;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.FilterDatetime:interface" />
- name: condition
  uid: ExcelScript!ExcelScript.PivotDateFilter#condition:member
  package: ExcelScript!
  fullName: condition
  summary: Spécifie la condition du filtre, qui définit les critères de filtrage nécessaires.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'condition: DateFilterCondition;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.DateFilterCondition:enum" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script applies a filter to a PivotTable that filters out rows \n * that aren't from this month.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the \"Date Recorded\" field to filter. \n  // The data in this field must be dates in order for the filter to work.\n  const pivot = workbook.getPivotTables()[0];\n  const rowHierarchy = pivot.getRowHierarchy(\"Date Recorded\");\n  const rowField = rowHierarchy.getFields()[0];\n\n  // Apply the date filter.\n  rowField.applyFilter({\n    dateFilter: {\n      // Setting the condition to `thisMonth` means items that are before or\n      // after this month will not be displayed.\n      condition: ExcelScript.DateFilterCondition.thisMonth\n    }\n  });\n}\n```"
- name: exclusive
  uid: ExcelScript!ExcelScript.PivotDateFilter#exclusive:member
  package: ExcelScript!
  fullName: exclusive
  summary: Si `true`<!-- -->, le filtre *exclut les* éléments qui répondent aux critères. La valeur par défaut est `false` (filtre pour inclure les éléments qui répondent aux critères).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'exclusive?: boolean;'
    return:
      type: boolean
- name: lowerBound
  uid: ExcelScript!ExcelScript.PivotDateFilter#lowerBound:member
  package: ExcelScript!
  fullName: lowerBound
  summary: Limite inférieure de la plage pour la condition de `between` filtre.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'lowerBound?: FilterDatetime;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.FilterDatetime:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script applies a filter to a PivotTable that filters it\n * to only show rows from between June 20th, 2022 and July 10th, 2022.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the \"Date Recorded\" field to filter. \n  // The data in this field must be dates in order for the filter to work.\n  const pivot = workbook.getPivotTables()[0];\n  const rowHierarchy = pivot.getRowHierarchy(\"Date Recorded\");\n  const rowField = rowHierarchy.getFields()[0];\n\n  // Create the filter's date boundaries.\n  let earliestDate: ExcelScript.FilterDatetime = {\n    date: \"2022-06-20\",\n    specificity: ExcelScript.FilterDatetimeSpecificity.day\n  };\n  let latestDate: ExcelScript.FilterDatetime = {\n    date: \"2022-07-10\",\n    specificity: ExcelScript.FilterDatetimeSpecificity.day\n  };\n\n  // Apply the date filter.\n  rowField.applyFilter({\n    dateFilter: {\n      condition: ExcelScript.DateFilterCondition.between,\n      lowerBound: earliestDate,\n      upperBound: latestDate\n    }\n  });\n}\n```"
- name: upperBound
  uid: ExcelScript!ExcelScript.PivotDateFilter#upperBound:member
  package: ExcelScript!
  fullName: upperBound
  summary: Limite supérieure de la plage pour la condition de `between` filtre.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'upperBound?: FilterDatetime;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.FilterDatetime:interface" />
- name: wholeDays
  uid: ExcelScript!ExcelScript.PivotDateFilter#wholeDays:member
  package: ExcelScript!
  fullName: wholeDays
  summary: For, <mot clé><!-- -->, `before`<!-- -->, `after`<!-- -->, et `between` les conditions de filtre, indiquent si les comparaisons doivent être effectuées en jours entiers.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'wholeDays?: boolean;'
    return:
      type: boolean
metadata:
  ms.openlocfilehash: ff14d7c30ca13b320cc1219ab0694aa1b18a03b4
  ms.sourcegitcommit: 1c3f24cda5e255ddb9dd7741f4af26ea0ad9922e
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 07/20/2022
  ms.locfileid: "66890339"
