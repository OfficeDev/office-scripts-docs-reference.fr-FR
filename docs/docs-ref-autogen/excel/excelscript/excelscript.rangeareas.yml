### YamlMime:TSType
name: ExcelScript.RangeAreas
uid: ExcelScript!ExcelScript.RangeAreas:interface
package: ExcelScript!
fullName: ExcelScript.RangeAreas
summary: '`RangeAreas` représente une collection d’une ou plusieurs plages rectangulaires dans la même feuille de calcul.'
remarks: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script clears all the cells in the current worksheet that are displaying errors.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the used range on the current sheet.\n  const currentSheet = workbook.getActiveWorksheet();\n  const usedRange = currentSheet.getUsedRange();\n\n  // Get the RangeAreas object for each cell with a formula error.\n  const errorCells = usedRange.getSpecialCells(ExcelScript.SpecialCellType.formulas, ExcelScript.SpecialCellValueType.errors);\n\n  // If there are any error cells, clear them.\n  if (errorCells) {\n    errorCells.clear();\n  }\n}\n```"
isPreview: false
isDeprecated: false
type: interface
methods:
- name: addConditionalFormat(type)
  uid: ExcelScript!ExcelScript.RangeAreas#addConditionalFormat:member(1)
  package: ExcelScript!
  fullName: addConditionalFormat(type)
  summary: Ajoute un nouveau format conditionnel à la collection à la première/priorité supérieure.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addConditionalFormat(type: ConditionalFormatType): ConditionalFormat;'
    parameters:
    - id: type
      description: Type de mise en forme conditionnelle en cours d’ajout. Pour plus `ExcelScript.ConditionalFormatType` d’informations, voir.
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormatType:enum" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />
      description: ''
- name: calculate()
  uid: ExcelScript!ExcelScript.RangeAreas#calculate:member(1)
  package: ExcelScript!
  fullName: calculate()
  summary: Calcule toutes les cellules dans le `RangeAreas`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(): void;'
    return:
      type: void
      description: ''
- name: clear(applyTo)
  uid: ExcelScript!ExcelScript.RangeAreas#clear:member(1)
  package: ExcelScript!
  fullName: clear(applyTo)
  summary: Cette propriété permet d’effacer les valeurs, le format, le remplissage, la bordure et d’autres propriétés de chacune des zones qui composent cet `RangeAreas` objet.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(applyTo?: ClearApplyTo): void;'
    parameters:
    - id: applyTo
      description: Facultatif. Détermine le type d’action de suppression. Pour plus `ExcelScript.ClearApplyTo` d’informations, voir. La valeur par défaut est « All ».
      type: <xref uid="ExcelScript!ExcelScript.ClearApplyTo:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script clears all the cells in the current worksheet that are displaying errors.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the used range on the current sheet.\n  const currentSheet = workbook.getActiveWorksheet();\n  const usedRange = currentSheet.getUsedRange();\n\n  // Get the RangeAreas object for each cell with a formula error.\n  const errorCells = usedRange.getSpecialCells(ExcelScript.SpecialCellType.formulas, ExcelScript.SpecialCellValueType.errors);\n\n  // If there are any error cells, clear them.\n  if (errorCells) {\n    errorCells.clear();\n  }\n}\n```"
- name: clearAllConditionalFormats()
  uid: ExcelScript!ExcelScript.RangeAreas#clearAllConditionalFormats:member(1)
  package: ExcelScript!
  fullName: clearAllConditionalFormats()
  summary: Efface toutes les mises en forme conditionnelles actives sur la plage spécifiée actuelle.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clearAllConditionalFormats(): void;'
    return:
      type: void
      description: ''
- name: convertDataTypeToText()
  uid: ExcelScript!ExcelScript.RangeAreas#convertDataTypeToText:member(1)
  package: ExcelScript!
  fullName: convertDataTypeToText()
  summary: Convertit toutes les cellules des types de `RangeAreas` données en texte.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertDataTypeToText(): void;'
    return:
      type: void
      description: ''
- name: copyFrom(sourceRange, copyType, skipBlanks, transpose)
  uid: ExcelScript!ExcelScript.RangeAreas#copyFrom:member(1)
  package: ExcelScript!
  fullName: copyFrom(sourceRange, copyType, skipBlanks, transpose)
  summary: Copie les données de cellule ou la mise en forme de la plage source ou `RangeAreas` de la plage actuelle `RangeAreas`<!-- -->. La taille de la destination `RangeAreas` peut être différente de la plage source ou `RangeAreas`<!-- -->. La destination est automatiquement étendue si elle est plus petite que la source.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      copyFrom(
                  sourceRange: Range | RangeAreas | string,
                  copyType?: RangeCopyType,
                  skipBlanks?: boolean,
                  transpose?: boolean
              ): void;
    parameters:
    - id: sourceRange
      description: Plage source ou à `RangeAreas` partir de la copie. Lorsque la source possède `RangeAreas` plusieurs plages, leur formulaire doit pouvoir être créé en supprimant des lignes ou des colonnes complètes d’une plage rectangulaire.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" /> | string
    - id: copyType
      description: Type de données de cellule ou de mise en forme à copier. La valeur par défaut est « All ».
      type: <xref uid="ExcelScript!ExcelScript.RangeCopyType:enum" />
    - id: skipBlanks
      description: True si pour ignorer les cellules vides dans la plage source ou `RangeAreas`<!-- -->. La valeur par défaut est False.
      type: boolean
    - id: transpose
      description: True si pour transposer les cellules dans la destination `RangeAreas`<!-- -->. La valeur par défaut est False.
      type: boolean
    return:
      type: void
      description: ''
- name: getAddress()
  uid: ExcelScript!ExcelScript.RangeAreas#getAddress:member(1)
  package: ExcelScript!
  fullName: getAddress()
  summary: Renvoie la `RangeAreas` référence en style A1. La valeur d’adresse contient le nom de la feuille de calcul pour chaque bloc rectangulaire de cellules (par exemple, « Feuille1 ! A1:B4, Sheet1! D1:D4 »).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAddress(): string;'
    return:
      type: string
      description: ''
- name: getAddressLocal()
  uid: ExcelScript!ExcelScript.RangeAreas#getAddressLocal:member(1)
  package: ExcelScript!
  fullName: getAddressLocal()
  summary: Renvoie la référence `RangeAreas` dans les paramètres régionaux de l’utilisateur.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAddressLocal(): string;'
    return:
      type: string
      description: ''
- name: getAreaCount()
  uid: ExcelScript!ExcelScript.RangeAreas#getAreaCount:member(1)
  package: ExcelScript!
  fullName: getAreaCount()
  summary: Renvoie le nombre de plages rectangulaires qui composent cet `RangeAreas` objet.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAreaCount(): number;'
    return:
      type: number
      description: ''
- name: getAreas()
  uid: ExcelScript!ExcelScript.RangeAreas#getAreas:member(1)
  package: ExcelScript!
  fullName: getAreas()
  summary: Renvoie une collection de plages rectangulaires qui composent cet `RangeAreas` objet.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAreas(): Range[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />[]
      description: ''
- name: getCellCount()
  uid: ExcelScript!ExcelScript.RangeAreas#getCellCount:member(1)
  package: ExcelScript!
  fullName: getCellCount()
  summary: Renvoie le nombre de cellules dans l’objet `RangeAreas` , récapitulant le nombre de cellules de toutes les plages rectangulaires individuelles. Renvoie -1 si le nombre de cellules est supérieure à 2 ^ 31-1 (2 147 483 647).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCellCount(): number;'
    return:
      type: number
      description: ''
- name: getConditionalFormat(id)
  uid: ExcelScript!ExcelScript.RangeAreas#getConditionalFormat:member(1)
  package: ExcelScript!
  fullName: getConditionalFormat(id)
  summary: Renvoie une mise en forme conditionnelle à un ID donné.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getConditionalFormat(id: string): ConditionalFormat;'
    parameters:
    - id: id
      description: ID de la mise en forme conditionnelle.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />
      description: ''
- name: getConditionalFormats()
  uid: ExcelScript!ExcelScript.RangeAreas#getConditionalFormats:member(1)
  package: ExcelScript!
  fullName: getConditionalFormats()
  summary: Renvoie une collection de formats conditionnels qui se coupent avec les cellules de cet `RangeAreas` objet.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getConditionalFormats(): ConditionalFormat[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />[]
      description: ''
- name: getDataValidation()
  uid: ExcelScript!ExcelScript.RangeAreas#getDataValidation:member(1)
  package: ExcelScript!
  fullName: getDataValidation()
  summary: Renvoie un objet de validation de données pour toutes les plages dans le `RangeAreas`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataValidation(): DataValidation;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.DataValidation:interface" />
      description: ''
- name: getEntireColumn()
  uid: ExcelScript!ExcelScript.RangeAreas#getEntireColumn:member(1)
  package: ExcelScript!
  fullName: getEntireColumn()
  summary: "`RangeAreas` Renvoie un objet qui représente les colonnes entières `RangeAreas` de l'(par exemple, `RangeAreas` si le courant représente les cellules « B4:E11, H2 », il renvoie un `RangeAreas` qui représente les colonnes « B:E, H:H »)."
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntireColumn(): RangeAreas;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: ''
- name: getEntireRow()
  uid: ExcelScript!ExcelScript.RangeAreas#getEntireRow:member(1)
  package: ExcelScript!
  fullName: getEntireRow()
  summary: Renvoie un `RangeAreas` objet qui représente les lignes entières `RangeAreas` de l'(par exemple, `RangeAreas` si le courant représente les cellules « B4:E11 `RangeAreas` », il renvoie un qui représente les lignes « 4:11 »).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntireRow(): RangeAreas;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: ''
- name: getFormat()
  uid: ExcelScript!ExcelScript.RangeAreas#getFormat:member(1)
  package: ExcelScript!
  fullName: getFormat()
  summary: Renvoie un `RangeFormat` objet, qui encapsule la police, le remplissage, les bordures, l’alignement et d’autres propriétés de toutes les plages de l’objet `RangeAreas` .
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormat(): RangeFormat;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeFormat:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```TypeScript\n/**\n * This script finds and highlights all the cells in the current worksheet that contain a formula.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the used range on the current sheet.\n  const currentSheet = workbook.getActiveWorksheet();\n  const usedRange = currentSheet.getUsedRange();\n\n  // Get the RangeAreas object for each cell with a formula.\n  const formulaCells = usedRange.getSpecialCells(ExcelScript.SpecialCellType.formulas);\n\n  // Add a light blue background to the cells containing formulas.\n  formulaCells.getFormat().getFill().setColor(\"#ADD8E6\");\n}\n```"
- name: getIntersection(anotherRange)
  uid: ExcelScript!ExcelScript.RangeAreas#getIntersection:member(1)
  package: ExcelScript!
  fullName: getIntersection(anotherRange)
  summary: Renvoie l’objet `RangeAreas` qui représente l’intersection des plages données ou `RangeAreas`<!-- -->. Si aucune intersection n’est trouvée, cette fonction renvoie `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIntersection(anotherRange: Range | RangeAreas | string): RangeAreas;'
    parameters:
    - id: anotherRange
      description: Plage, objet `RangeAreas` ou adresse qui sera utilisé pour déterminer l’intersection.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" /> | string
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: ''
- name: getIsEntireColumn()
  uid: ExcelScript!ExcelScript.RangeAreas#getIsEntireColumn:member(1)
  package: ExcelScript!
  fullName: getIsEntireColumn()
  summary: Spécifie si toutes les plages de cet objet représentent des colonnes entières `RangeAreas` (par exemple, « A:C, Q:Z »).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIsEntireColumn(): boolean;'
    return:
      type: boolean
      description: ''
- name: getIsEntireRow()
  uid: ExcelScript!ExcelScript.RangeAreas#getIsEntireRow:member(1)
  package: ExcelScript!
  fullName: getIsEntireRow()
  summary: Spécifie si toutes les plages `RangeAreas` de cet objet représentent des lignes entières (par exemple, « 1:3, 5:7 »).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIsEntireRow(): boolean;'
    return:
      type: boolean
      description: ''
- name: getOffsetRangeAreas(rowOffset, columnOffset)
  uid: ExcelScript!ExcelScript.RangeAreas#getOffsetRangeAreas:member(1)
  package: ExcelScript!
  fullName: getOffsetRangeAreas(rowOffset, columnOffset)
  summary: Renvoie un `RangeAreas` objet décalé par le décalage de ligne et de colonne spécifique. La dimension de l’objet renvoyé `RangeAreas` correspond à l’objet d’origine. Si le résultat est `RangeAreas` forcé en dehors des limites de la grille de la feuille de calcul, une erreur est lancée.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      getOffsetRangeAreas(
                  rowOffset: number,
                  columnOffset: number
              ): RangeAreas;
    parameters:
    - id: rowOffset
      description: Nombre de lignes (positif, négatif ou 0) par lequel `RangeAreas` décalé. Les valeurs positives représentent un décalage vers le bas, et les valeurs négatives un décalage vers le haut.
      type: number
    - id: columnOffset
      description: Nombre de colonnes (positif, négatif ou 0) par lequel `RangeAreas` décaler. Les valeurs positives représentent un décalage vers la droite, et les valeurs négatives un décalage vers la gauche.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: ''
- name: getPredefinedCellStyle()
  uid: ExcelScript!ExcelScript.RangeAreas#getPredefinedCellStyle:member(1)
  package: ExcelScript!
  fullName: getPredefinedCellStyle()
  summary: Représente le style de toutes les plages de cet `RangeAreas` objet. Si les styles des cellules sont incohérents, `null` ils sont renvoyés. Pour les styles personnalisés, le nom du style est renvoyé. Pour les styles intégrés, une chaîne représentant une valeur dans `BuiltInStyle` l’enum est renvoyée.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPredefinedCellStyle(): string;'
    return:
      type: string
      description: ''
- name: getSpecialCells(cellType, cellValueType)
  uid: ExcelScript!ExcelScript.RangeAreas#getSpecialCells:member(1)
  package: ExcelScript!
  fullName: getSpecialCells(cellType, cellValueType)
  summary: Renvoie un `RangeAreas` objet qui représente toutes les cellules qui correspondent au type et à la valeur spécifiés. Si aucune cellule spéciale ne correspond aux critères, cette fonction renvoie `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      getSpecialCells(
                  cellType: SpecialCellType,
                  cellValueType?: SpecialCellValueType
              ): RangeAreas;
    parameters:
    - id: cellType
      description: Type de cellules à inclure.
      type: <xref uid="ExcelScript!ExcelScript.SpecialCellType:enum" />
    - id: cellValueType
      description: Si l’une `cellType` ou l’autre `constants` de ces deux `formulas`<!-- -->, cet argument est utilisé pour déterminer les types de cellules à inclure dans le résultat. Ces valeurs peuvent être combinées pour renvoyer plusieurs types. Par défaut, toutes les constantes ou formules sont sélectionnées, quel qu'en soit le type.
      type: <xref uid="ExcelScript!ExcelScript.SpecialCellValueType:enum" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: ''
- name: getTables(fullyContained)
  uid: ExcelScript!ExcelScript.RangeAreas#getTables:member(1)
  package: ExcelScript!
  fullName: getTables(fullyContained)
  summary: Renvoie une collection étendue de tableaux qui chevauchent n’importe quelle plage de cet `RangeAreas` objet.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTables(fullyContained?: boolean): Table[];'
    parameters:
    - id: fullyContained
      description: If `true`<!-- -->, renvoie uniquement les tableaux qui sont entièrement contenus dans les limites de la plage. La valeur par défaut est `false`<!-- -->.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Table:interface" />[]
      description: ''
- name: getUsedRangeAreas(valuesOnly)
  uid: ExcelScript!ExcelScript.RangeAreas#getUsedRangeAreas:member(1)
  package: ExcelScript!
  fullName: getUsedRangeAreas(valuesOnly)
  summary: Renvoie l’objet utilisé `RangeAreas` qui comprend toutes les zones utilisées de plages rectangulaires individuelles dans l’objet `RangeAreas` . S’il n’existe aucune cellule utilisée dans le `RangeAreas`<!-- -->, puis cette fonction renvoie `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRangeAreas(valuesOnly?: boolean): RangeAreas;'
    parameters:
    - id: valuesOnly
      description: S’il faut prendre en compte uniquement les cellules avec des valeurs en tant que cellules utilisées.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: ''
- name: getWorksheet()
  uid: ExcelScript!ExcelScript.RangeAreas#getWorksheet:member(1)
  package: ExcelScript!
  fullName: getWorksheet()
  summary: Renvoie la feuille de calcul pour l’actuel `RangeAreas`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWorksheet(): Worksheet;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: setDirty()
  uid: ExcelScript!ExcelScript.RangeAreas#setDirty:member(1)
  package: ExcelScript!
  fullName: setDirty()
  summary: Définit les `RangeAreas` données à recalculer lors du recalcul suivant.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDirty(): void;'
    return:
      type: void
      description: ''
- name: setPredefinedCellStyle(predefinedCellStyle)
  uid: ExcelScript!ExcelScript.RangeAreas#setPredefinedCellStyle:member(1)
  package: ExcelScript!
  fullName: setPredefinedCellStyle(predefinedCellStyle)
  summary: Représente le style de toutes les plages de cet `RangeAreas` objet. Si les styles des cellules sont incohérents, `null` ils sont renvoyés. Pour les styles personnalisés, le nom du style est renvoyé. Pour les styles intégrés, une chaîne représentant une valeur dans `BuiltInStyle` l’enum est renvoyée.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setPredefinedCellStyle(predefinedCellStyle: string): void;'
    parameters:
    - id: predefinedCellStyle
      description: ''
      type: string
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 61f1c5d9f766f016055f7398b9ba2bada8b22e0d
  ms.sourcegitcommit: dfc12de9e6eb5de71199b36f92ce93039509ad37
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 03/23/2022
  ms.locfileid: "63755969"
