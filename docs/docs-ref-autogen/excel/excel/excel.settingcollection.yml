### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.SettingCollection:class'
    summary: Représente une collection d’objets de paramètre de paire clé-valeur qui font partie du classeur. L’étendue est limitée à un fichier et une combinaison de compléments (de volet de tâches ou de contenu).
    name: Excel.SettingCollection
    fullName: Excel.SettingCollection
    langs:
      - typeScript
    type: class
    package: excel!
    children:
      - 'excel!Excel.SettingCollection#add:member(1)'
      - 'excel!Excel.SettingCollection#context:member'
      - 'excel!Excel.SettingCollection#getCount:member(1)'
      - 'excel!Excel.SettingCollection#getItem:member(1)'
      - 'excel!Excel.SettingCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.SettingCollection#items:member'
      - 'excel!Excel.SettingCollection#load:member(1)'
  - uid: 'excel!Excel.SettingCollection#add:member(1)'
    summary: Définit ou ajoute le paramètre spécifié dans le classeur.
    name: 'add(key, value)'
    fullName: 'add(key, value)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(key: string, value: string | number | boolean | Date | Array<any> | any): Excel.Setting;'
      return:
        type:
          - 'excel!Excel.Setting:class'
        description: ''
      parameters:
        - id: key
          description: Clé du nouveau paramètre.
          type:
            - string
        - id: value
          description: Valeur du nouveau paramètre.
          type:
            - 'excel!Excel.SettingCollection#add~0:complex'
  - uid: 'excel!Excel.SettingCollection#context:member'
    summary: Contexte de demande associé à l’objet. Cette opération connecte le processus du complément au processus de l’application hôte Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.SettingCollection#getCount:member(1)'
    summary: Obtient le nombre de paramètres dans la collection.
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.SettingCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.SettingCollection#getItem:member(1)'
    summary: Obtient une Entrée de paramètre via la clé.
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Setting;'
      return:
        type:
          - 'excel!Excel.Setting:class'
        description: ''
      parameters:
        - id: key
          description: Clé du paramètre.
          type:
            - string
  - uid: 'excel!Excel.SettingCollection#getItemOrNullObject:member(1)'
    summary: 'Obtient une entrée de paramètre via la clé. Si le paramètre n’existe pas, renvoie un objet null.'
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Setting;'
      return:
        type:
          - 'excel!Excel.Setting:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let settings = context.workbook.settings;
              let needsReview = settings.getItem("NeedsReview");
              needsReview.delete();
              needsReview = settings.getItemOrNullObject("NeedsReview");

              await context.sync();

              if (needsReview.isNullObject) {
                  console.log("The setting has been deleted");
              } else {
                  console.log("The setting was not deleted");
              }

              await context.sync();
          }
          ```
      parameters:
        - id: key
          description: Clé du paramètre.
          type:
            - string
  - uid: 'excel!Excel.SettingCollection#items:member'
    summary: Obtient l’élément enfant chargé dans cette collection de sites.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Setting[];'
      return:
        type:
          - 'excel!Excel.SettingCollection#items~0:complex'
  - uid: 'excel!Excel.SettingCollection#load:member(1)'
    summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez appeler `context.sync()` avant de lire les propriétés.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.SettingCollection;'
      return:
        type:
          - 'excel!Excel.SettingCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.
          type:
            - 'string | string[]'
references:
  - uid: 'excel!Excel.Setting:class'
    name: Setting
    fullName: Excel.Setting
  - uid: 'excel!Excel.SettingCollection#add~0:complex'
    name: string | number | boolean | Date | Array<any> | any
    fullName: string | number | boolean | Date | Array<any> | any
    spec.typeScript:
      - name: 'string | number | boolean | '
        fullName: 'string | number | boolean | '
      - uid: '!Date:interface'
        name: Date
        fullName: Date
      - name: ' | '
        fullName: ' | '
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: <any> | any
        fullName: <any> | any
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
    fullName: Excel.RequestContext
  - uid: 'excel!Excel.SettingCollection#getCount~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!Excel.ClientResult:class'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.SettingCollection#items~0:complex'
    name: 'Excel.Setting[]'
    fullName: 'Excel.Setting[]'
    spec.typeScript:
      - uid: 'excel!Excel.Setting:class'
        name: Excel.Setting
        fullName: Excel.Setting
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.SettingCollection:class'
    name: SettingCollection
    fullName: Excel.SettingCollection