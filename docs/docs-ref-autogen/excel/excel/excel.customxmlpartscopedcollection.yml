### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CustomXmlPartScopedCollection:class'
    summary: 'Collection étendue de parties XML personnalisées. Une collection d’étendues est le résultat d’une opération, par exemple, le filtrage par espace de noms. Une collection d’étendues ne peut pas être étendue.'
    name: Excel.CustomXmlPartScopedCollection
    fullName: Excel.CustomXmlPartScopedCollection
    langs:
      - typeScript
    type: class
    package: excel!
    children:
      - 'excel!Excel.CustomXmlPartScopedCollection#context:member'
      - 'excel!Excel.CustomXmlPartScopedCollection#getCount:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#getItem:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#getOnlyItem:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#getOnlyItemOrNullObject:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#items:member'
      - 'excel!Excel.CustomXmlPartScopedCollection#load:member(1)'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#context:member'
    summary: Contexte de demande associé à l’objet. Cette opération connecte le processus du complément au processus de l’application hôte Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getCount:member(1)'
    summary: Obtient le nombre de parties CustomXML dans cette collection.
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection#getCount~0:complex'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          async function main(context: Excel.RequestContext) {
              $("#display-xml").text("");
              let contosoNamespace = "http://schemas.contoso.com/review/1.0";
              let customXmlParts = context.workbook.customXmlParts;
              let filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              let numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  let onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  let xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  let readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getItem:member(1)'
    summary: Obtient une partie XML personnalisée en fonction de son ID.
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
      parameters:
        - id: id
          description: ID de l’objet à récupérer.
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getItemOrNullObject:member(1)'
    summary: 'Obtient une partie XML personnalisée en fonction de son ID. Si l’objet CustomXmlPart n’existe pas, la propriété isNull de l’objet renvoie la valeur true.'
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let settings = context.workbook.settings;
              let xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
                  let xmlBlob = customXmlPart.getXml();
                  customXmlPart.delete();
                  customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

                  await context.sync();

                  if (customXmlPart.isNullObject) {
                      $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                      // Delete the unneeded setting too.
                      xmlPartIDSetting.delete();            
                  } else {
                      let readableXml = addLineBreaksToXML(xmlBlob.value);
                      let strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                      $("#display-xml").text(strangeMessage);
                  }

                  await context.sync();
              }
          }
          ```
      parameters:
        - id: id
          description: ID de l’objet à récupérer.
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getOnlyItem:member(1)'
    summary: 'Si la collection contient exactement un élément, cette méthode le renvoie. Dans le cas contraire, cette méthode génère une erreur.'
    name: getOnlyItem()
    fullName: getOnlyItem()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItem(): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          async function main(context: Excel.RequestContext) {
              $("#display-xml").text("");
              let contosoNamespace = "http://schemas.contoso.com/review/1.0";
              let customXmlParts = context.workbook.customXmlParts;
              let filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              let numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  let onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  let xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  let readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getOnlyItemOrNullObject:member(1)'
    summary: 'Si la collection contient exactement un élément, cette méthode le renvoie. Dans le cas contraire, cette méthode renvoie la valeur null.'
    name: getOnlyItemOrNullObject()
    fullName: getOnlyItemOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItemOrNullObject(): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#items:member'
    summary: Obtient l’élément enfant chargé dans cette collection de sites.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection#items~0:complex'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#load:member(1)'
    summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez appeler `context.sync()` avant de lire les propriétés.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.
          type:
            - 'string | string[]'
references:
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
    fullName: Excel.RequestContext
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getCount~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!Excel.ClientResult:class'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.CustomXmlPart:class'
    name: CustomXmlPart
    fullName: Excel.CustomXmlPart
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#items~0:complex'
    name: 'Excel.CustomXmlPart[]'
    fullName: 'Excel.CustomXmlPart[]'
    spec.typeScript:
      - uid: 'excel!Excel.CustomXmlPart:class'
        name: Excel.CustomXmlPart
        fullName: Excel.CustomXmlPart
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection:class'
    name: CustomXmlPartScopedCollection
    fullName: Excel.CustomXmlPartScopedCollection