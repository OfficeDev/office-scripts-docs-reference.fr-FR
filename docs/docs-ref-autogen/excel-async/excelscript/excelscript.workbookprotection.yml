### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.WorkbookProtection:interface'
    summary: Représente la protection d’un objet Workbook.
    name: Excel.WorkbookProtection
    fullName: Excel.WorkbookProtection
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.WorkbookProtection#load:member(1)'
      - 'excel!Excel.WorkbookProtection#protect:member(1)'
      - 'excel!Excel.WorkbookProtection#protected:member'
      - 'excel!Excel.WorkbookProtection#unprotect:member(1)'
  - uid: 'excel!Excel.WorkbookProtection#load:member(1)'
    summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez appeler `context.sync()` avant de lire les propriétés.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.WorkbookProtection#protect:member(1)'
    summary: Protège un classeur. Échoue si le classeur est protégé.
    name: protect(password)
    fullName: protect(password)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'protect(password?: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let workbook = context.workbook;
              workbook.load("protection/protected");

              await context.sync();

              if (!workbook.protection.protected) {
                  workbook.protection.protect();
              }
          }
          ```
          ```typescript
          let password = await passwordHandler();
          passwordHelper(password);
          async function main(context: Excel.RequestContext) {
              let workbook = context.workbook;
              workbook.load("protection/protected");

              await context.sync();

              if (!workbook.protection.protected) {
                  workbook.protection.protect(password);
              }
          }
          ```
      parameters:
        - id: password
          description: mot de passe de protection du classeur.
          type:
            - string
  - uid: 'excel!Excel.WorkbookProtection#protected:member'
    summary: Indique si le classeur est protégé.
    name: protected
    fullName: protected
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protected: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.WorkbookProtection#unprotect:member(1)'
    summary: Annule la protection un classeur.
    name: unprotect(password)
    fullName: unprotect(password)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unprotect(password?: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          async function main(context: Excel.RequestContext) {
              let workbook = context.workbook;
              workbook.protection.unprotect();
          }
          ```
          ```typescript
          let password = await passwordHandler();
          passwordHelper(password);
          async function main(context: Excel.RequestContext) {
              let workbook = context.workbook;
              workbook.protection.unprotect(password);
          }
          ```
      parameters:
        - id: password
          description: mot de passe de protection du classeur.
          type:
            - string