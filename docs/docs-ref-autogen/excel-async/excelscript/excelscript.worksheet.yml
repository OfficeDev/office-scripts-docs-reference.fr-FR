### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Worksheet:interface'
    summary: 'Une feuille de calcul Excel est une grille de cellules. Il peut contenir des données, des tableaux, des graphiques, etc. Pour en savoir plus sur le modèle objet de feuille de calcul, consultez [travailler avec des feuilles de calcul à l’aide de l’API JavaScript pour Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets) .<!-- -->.'
    name: Excel.Worksheet
    fullName: Excel.Worksheet
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.Worksheet#activate:member(1)'
      - 'excel!Excel.Worksheet#autoFilter:member'
      - 'excel!Excel.Worksheet#calculate:member(1)'
      - 'excel!Excel.Worksheet#charts:member'
      - 'excel!Excel.Worksheet#comments:member'
      - 'excel!Excel.Worksheet#copy:member(1)'
      - 'excel!Excel.Worksheet#delete:member(1)'
      - 'excel!Excel.Worksheet#enableCalculation:member'
      - 'excel!Excel.Worksheet#findAll:member(1)'
      - 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#freezePanes:member'
      - 'excel!Excel.Worksheet#getCell:member(1)'
      - 'excel!Excel.Worksheet#getNext:member(1)'
      - 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getPrevious:member(1)'
      - 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getRange:member(1)'
      - 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
      - 'excel!Excel.Worksheet#getRanges:member(1)'
      - 'excel!Excel.Worksheet#getUsedRange:member(1)'
      - 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#horizontalPageBreaks:member'
      - 'excel!Excel.Worksheet#id:member'
      - 'excel!Excel.Worksheet#load:member(1)'
      - 'excel!Excel.Worksheet#name:member'
      - 'excel!Excel.Worksheet#names:member'
      - 'excel!Excel.Worksheet#pageLayout:member'
      - 'excel!Excel.Worksheet#pivotTables:member'
      - 'excel!Excel.Worksheet#position:member'
      - 'excel!Excel.Worksheet#protection:member'
      - 'excel!Excel.Worksheet#replaceAll:member(1)'
      - 'excel!Excel.Worksheet#shapes:member'
      - 'excel!Excel.Worksheet#showGridlines:member'
      - 'excel!Excel.Worksheet#showHeadings:member'
      - 'excel!Excel.Worksheet#showOutlineLevels:member(1)'
      - 'excel!Excel.Worksheet#slicers:member'
      - 'excel!Excel.Worksheet#standardHeight:member'
      - 'excel!Excel.Worksheet#standardWidth:member'
      - 'excel!Excel.Worksheet#tabColor:member'
      - 'excel!Excel.Worksheet#tables:member'
      - 'excel!Excel.Worksheet#verticalPageBreaks:member'
      - 'excel!Excel.Worksheet#visibility:member'
  - uid: 'excel!Excel.Worksheet#activate:member(1)'
    summary: Active la feuille de calcul dans l’interface utilisateur Excel.
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Worksheet#autoFilter:member'
    summary: Représente l’objet AutoFilter de filtre automatique de la feuille de calcul.
    name: autoFilter
    fullName: autoFilter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly autoFilter: AutoFilter;'
      return:
        type:
          - 'excel!Excel.AutoFilter:interface'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              let farmData = sheet.getUsedRange();

              // This filter will only show the rows with the top 25% of values in column 3.
              sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Worksheet#calculate:member(1)'
    summary: Calcule toutes les cellules d’une feuille de calcul.
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: 'True, pour marquer tout comme modifié.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#charts:member'
    summary: Renvoie une collection de graphiques qui font partie de la feuille de calcul.
    name: charts
    fullName: charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: ChartCollection;'
      return:
        type:
          - 'excel!Excel.ChartCollection:interface'
  - uid: 'excel!Excel.Worksheet#comments:member'
    summary: Renvoie une collection de tous les objets Lecteur sur l’ordinateur.
    name: comments
    fullName: comments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly comments: CommentCollection;'
      return:
        type:
          - 'excel!Excel.CommentCollection:interface'
  - uid: 'excel!Excel.Worksheet#copy:member(1)'
    summary: Copie une feuille de calcul et la place à la position spécifiée.
    name: 'copy(positionType, relativeTo)'
    fullName: 'copy(positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        copy(
                    positionType?:
                        | WorksheetPositionType
                        | "None"
                        | "Before"
                        | "After"
                        | "Beginning"
                        | "End",
                    relativeTo?: Worksheet
                ): Worksheet;
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let myWorkbook = context.workbook;
              let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
              let copiedSheet = sampleSheet.copy("End")

              sampleSheet.load("name");
              copiedSheet.load("name");

              await context.sync();

              console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
          }
          ```
      parameters:
        - id: positionType
          description: "Emplacement dans le classeur où placer la feuille de calcul nouvellement créée. La valeur par défaut est «\_None\_», qui insère la feuille de calcul au début de la feuille de calcul."
          type:
            - 'excel!Excel.Worksheet#copy~0:complex'
        - id: relativeTo
          description: "Feuille de calcul existante qui détermine la position de la nouvelle feuille de calcul. Cette condition n’est nécessaire que si le `positionType` est «\_Before\_» ou «\_after\_»."
          type:
            - 'excel!Excel.Worksheet:interface'
  - uid: 'excel!Excel.Worksheet#delete:member(1)'
    summary: "Supprime la feuille de calcul du classeur. Notez que si la visibilité de la feuille de calcul est définie sur «\_VeryHidden\_», l’opération de suppression échoue avec une `InvalidOperation` exception. Vous devez d’abord modifier sa visibilité sur masquée ou visible avant de la supprimer."
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Worksheet#enableCalculation:member'
    summary: Détermine si Excel doit recalculer la feuille de calcul lorsque cela est nécessaire. La valeur true si Excel recalcule la feuille de calcul lorsque cela est nécessaire. Elle a la valeur False si Excel ne recalcule pas la feuille.
    name: enableCalculation
    fullName: enableCalculation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enableCalculation: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Worksheet#findAll:member(1)'
    summary: Trouve toutes les occurrences de la chaîne donnée en fonction des critères spécifiées et renvoie un objet RangeAreas comprenant une ou plusieurs plages rectangulaires.
    name: 'findAll(text, criteria)'
    fullName: 'findAll(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findAll(text: string, criteria: WorksheetSearchCriteria): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
      parameters:
        - id: text
          description: Chaîne à rechercher.
          type:
            - string
        - id: criteria
          description: 'Critères de recherche supplémentaires, notamment si la recherche doit correspondre à la totalité de la cellule ou respecter la casse.'
          type:
            - 'excel!Excel.WorksheetSearchCriteria:interface'
  - uid: 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
    summary: Trouve toutes les occurrences de la chaîne donnée en fonction des critères spécifiées et renvoie un objet RangeAreas comprenant une ou plusieurs plages rectangulaires.
    name: 'findAllOrNullObject(text, criteria)'
    fullName: 'findAllOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        findAllOrNullObject(
                    text: string,
                    criteria: WorksheetSearchCriteria
                ): RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let foundRanges = sheet.findAllOrNullObject("Complete", {
                  completeMatch: true,
                  matchCase: false
              });

              await context.sync();

              if (foundRanges.isNullObject) {
                  console.log("No complete projects");
              } else {
                  foundRanges.format.fill.color = "green"
              }
          }
          ```
      parameters:
        - id: text
          description: Chaîne à rechercher.
          type:
            - string
        - id: criteria
          description: 'Critères de recherche supplémentaires, notamment si la recherche doit correspondre à la totalité de la cellule ou respecter la casse.'
          type:
            - 'excel!Excel.WorksheetSearchCriteria:interface'
  - uid: 'excel!Excel.Worksheet#freezePanes:member'
    summary: Obtient un objet qui peut être utilisé pour manipuler les volets figés de la feuille de calcul.
    name: freezePanes
    fullName: freezePanes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly freezePanes: WorksheetFreezePanes;'
      return:
        type:
          - 'excel!Excel.WorksheetFreezePanes:interface'
  - uid: 'excel!Excel.Worksheet#getCell:member(1)'
    summary: 'Renvoie l’objet de plage qui contient une cellule donnée sur la base des numéros de ligne et de colonne. La cellule peut être située en dehors des limites de sa plage parente, tant qu’elle reste dans la grille de la feuille de calcul.'
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: row
          description: Numéro de ligne de la cellule à récupérer. Avec indice zéro.
          type:
            - number
        - id: column
          description: Numéro de colonne de la cellule à récupérer. Avec indice zéro.
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getNext:member(1)'
    summary: 'Obtient la feuille de calcul qui suit celle-ci. S’il n’existe aucune feuille de calcul à la suite de celle-ci, cette méthode génère une erreur.'
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Facultatif. Si la valeur est true, ne prend en compte que les feuilles de calcul visibles, en ignorant celles qui sont masquées.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
    summary: 'Obtient la feuille de calcul qui suit celle-ci. S’il n’existe aucune feuille de calcul à la suite de celle-ci, cette méthode renvoie un objet null.'
    name: getNextOrNullObject(visibleOnly)
    fullName: getNextOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Facultatif. Si la valeur est true, ne prend en compte que les feuilles de calcul visibles, en ignorant celles qui sont masquées.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPrevious:member(1)'
    summary: 'Obtient la feuille de calcul qui précède celle-ci. S’il n’y a pas de feuille de calcul précédente, cette méthode génère une erreur.'
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Facultatif. Si la valeur est true, ne prend en compte que les feuilles de calcul visibles, en ignorant celles qui sont masquées.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
    summary: 'Obtient la feuille de calcul qui précède celle-ci. S’il n’y a pas de feuille de calcul précédente, cette méthode renvoie une valeur null.'
    name: getPreviousOrNullObject(visibleOnly)
    fullName: getPreviousOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Facultatif. Si la valeur est true, ne prend en compte que les feuilles de calcul visibles, en ignorant celles qui sont masquées.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getRange:member(1)'
    summary: 'Obtient l’objet de plage, représentant un seul bloc de cellules rectangulaires, spécifié par l’adresse ou le nom.'
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: address
          description: "Facultatif. La chaîne représentant l’adresse ou le nom de la plage. Par exemple, «\_a1\_: B2\_». Si cette propriété n’est pas définie, la plage de la feuille de calcul toute entière est renvoyée."
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
    summary: Obtient l’objet plage commençant à un index de ligne et de colonne particulier et couvrant un certain nombre de lignes et de colonnes.
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getRangeByIndexes(
                    startRow: number,
                    startColumn: number,
                    rowCount: number,
                    columnCount: number
                ): Range;
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: startRow
          description: Ligne de début (indexé à zéro).
          type:
            - number
        - id: startColumn
          description: Colonne de début (indexée à zéro).
          type:
            - number
        - id: rowCount
          description: Nombre de lignes à inclure dans la plage.
          type:
            - number
        - id: columnCount
          description: Nombre de colonnes à inclure dans la plage.
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getRanges:member(1)'
    summary: 'Obtient l’objet RangeAreas représentant un ou plusieurs blocs de plages rectangulaires, spécifiés par nom ou l’adresse.'
    name: getRanges(address)
    fullName: getRanges(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRanges(address?: string): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          async function main(context: Excel.RequestContext) {

              let sheet = context.workbook.worksheets.getActiveWorksheet();
              let specifiedRanges = sheet.getRanges("D3:D5, G3:G5");
              specifiedRanges.format.fill.color = "pink";

              await context.sync();
          })
          ```
      parameters:
        - id: address
          description: "Facultatif. Chaîne contenant les adresses ou les noms des plages individuelles séparées par des virgules. Par exemple, «\_a1\_: B2, A5\_: B5\_». Si ce n’est pas spécifié, un objet RangeArea est renvoyé pour l’intégralité de la feuille de calcul."
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getUsedRange:member(1)'
    summary: 'La plage utilisée est la plus petite plage qui englobe toutes les cellules auxquelles une valeur ou un format est affecté. Si la feuille de calcul entière est vide, cette fonction renvoie la cellule supérieure gauche (autrement dit, elle ne génère *pas* d’erreur).'
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: 'Facultatif. Si la valeur est true, ne prend en compte que les cellules contenant des valeurs comme cellules utilisées (en ignorant la mise en forme).'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
    summary: 'The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.'
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: Facultatif. Prend uniquement en compte les cellules avec des valeurs sous forme de cellules utilisées.
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#horizontalPageBreaks:member'
    summary: Obtient la collection de saut de page horizontal pour la feuille de calcul. Cette collection contient uniquement les sauts de page manuels.
    name: horizontalPageBreaks
    fullName: horizontalPageBreaks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly horizontalPageBreaks: PageBreakCollection;'
      return:
        type:
          - 'excel!Excel.PageBreakCollection:interface'
  - uid: 'excel!Excel.Worksheet#id:member'
    summary: 'Renvoie une valeur qui permet d’identifier la feuille de calcul de façon unique dans un classeur donné. La valeur de l’identificateur reste identique, même lorsque la feuille de calcul est renommée ou déplacée.'
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#load:member(1)'
    summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez appeler `context.sync()` avant de lire les propriétés.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Worksheet#name:member'
    summary: Nom complet de la feuille de calcul.
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#names:member'
    summary: Collection de noms inclus dans l’étendue de la feuille de calcul active.
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: NamedItemCollection;'
      return:
        type:
          - 'excel!Excel.NamedItemCollection:interface'
  - uid: 'excel!Excel.Worksheet#pageLayout:member'
    summary: Obtient l’objet PageLayout de la feuille de calcul.
    name: pageLayout
    fullName: pageLayout
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pageLayout: PageLayout;'
      return:
        type:
          - 'excel!Excel.PageLayout:interface'
  - uid: 'excel!Excel.Worksheet#pivotTables:member'
    summary: Collection de tableaux croisés dynamiques qui font partie de la feuille de calcul.
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: PivotTableCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableCollection:interface'
  - uid: 'excel!Excel.Worksheet#position:member'
    summary: Position de la feuille de calcul au sein du classeur (sur une base zéro).
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#protection:member'
    summary: Renvoie un objet de protection de feuille pour une feuille de calcul.
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: WorksheetProtection;'
      return:
        type:
          - 'excel!Excel.WorksheetProtection:interface'
  - uid: 'excel!Excel.Worksheet#replaceAll:member(1)'
    summary: Détecte et remplace la chaîne donnée basée sur les critères spécifiés dans la plage active.
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): ClientResult<number>;
      return:
        type:
          - 'excel!Excel.Worksheet#replaceAll~0:complex'
        description: ''
      parameters:
        - id: text
          description: Chaîne à rechercher.
          type:
            - string
        - id: replacement
          description: Chaîne de remplacement de l’original par.
          type:
            - string
        - id: criteria
          description: Critères de remplacement supplémentaires.
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Worksheet#shapes:member'
    summary: Renvoie une collection de tous les objets Forme sur la feuille de calcul.
    name: shapes
    fullName: shapes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly shapes: ShapeCollection;'
      return:
        type:
          - 'excel!Excel.ShapeCollection:interface'
  - uid: 'excel!Excel.Worksheet#showGridlines:member'
    summary: Indique si le quadrillage est visible par l’utilisateur.
    name: showGridlines
    fullName: showGridlines
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showGridlines: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.showGridlines = true;

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Worksheet#showHeadings:member'
    summary: Indique si les en-têtes sont visibles par l’utilisateur.
    name: showHeadings
    fullName: showHeadings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showHeadings: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Worksheet#showOutlineLevels:member(1)'
    summary: Affiche les groupes de lignes ou de colonnes en fonction de leurs niveaux hiérarchiques. Contourne le groupe et résume une liste de données dans la feuille de calcul. Les `rowLevels` `columnLevels` paramètres et spécifient le nombre de niveaux du plan qui seront affichés. La plage d’arguments acceptable est comprise entre 0 et 8. La valeur 0 ne change pas l’affichage actuel. Une valeur supérieure au nombre actuel de niveaux affiche tous les niveaux.
    name: 'showOutlineLevels(rowLevels, columnLevels)'
    fullName: 'showOutlineLevels(rowLevels, columnLevels)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showOutlineLevels(rowLevels: number, columnLevels: number): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getActiveWorksheet();

              // This collapses the entire outline.
              sheet.showOutlineLevels(1, 1);
              await context.sync();
          }
          ```
          ```typescript
          Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getActiveWorksheet();

              // This shows the top 3 outline levels; collapsing any additional sublevels.
              sheet.showOutlineLevels(3, 3);
              await context.sync();
          }
          ```
      parameters:
        - id: rowLevels
          description: Nombre de niveaux de ligne d’un plan à afficher.
          type:
            - number
        - id: columnLevels
          description: Nombre de niveaux de colonne d’un plan à afficher.
          type:
            - number
  - uid: 'excel!Excel.Worksheet#slicers:member'
    summary: Renvoie une collection de segments qui font partie de la feuille de calcul.
    name: slicers
    fullName: slicers
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly slicers: SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:interface'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Pivot");
              let slicer = sheet.slicers.add(
                  "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
                  "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
              );
              slicer.name = "Fruit Slicer";
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Worksheet#standardHeight:member'
    summary: 'Renvoie la hauteur standard (par défaut) de toutes les lignes dans la feuille de calcul, en points.'
    name: standardHeight
    fullName: standardHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#standardWidth:member'
    summary: 'Spécifie la largeur standard (par défaut) de toutes les colonnes de la feuille de calcul. Une unité de largeur de colonne est égale à la largeur d''un caractère du style Normal. Dans le cas des polices proportionnelles, la largeur du caractère 0 (zéro) est utilisée.'
    name: standardWidth
    fullName: standardWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'standardWidth: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#tabColor:member'
    summary: "Couleur d’onglet de la feuille de calcul. Lors de l’extraction de la couleur d’onglet, si la feuille de calcul est invisible, la valeur est null. Si la feuille de calcul est visible mais que la couleur d’onglet est définie sur auto, une chaîne vide est renvoyée. Dans le cas contraire, la propriété est définie sur une couleur, au format « \\# 123456\_» lors de la définition de la couleur, utilisez une chaîne vide pour définir une couleur «\_automatique\_» ou une autre couleur réelle."
    name: tabColor
    fullName: tabColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tabColor: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.tabColor = "#FF0000";

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Worksheet#tables:member'
    summary: Collection de tableaux qui font partie de la feuille de calcul.
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:interface'
  - uid: 'excel!Excel.Worksheet#verticalPageBreaks:member'
    summary: Obtient la collection de saut de page vertical pour la feuille de calcul. Cette collection contient uniquement les sauts de page manuels.
    name: verticalPageBreaks
    fullName: verticalPageBreaks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly verticalPageBreaks: PageBreakCollection;'
      return:
        type:
          - 'excel!Excel.PageBreakCollection:interface'
  - uid: 'excel!Excel.Worksheet#visibility:member'
    summary: Visibilité de la feuille de calcul.
    name: visibility
    fullName: visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - 'excel!Excel.Worksheet#visibility~0:complex'
references:
  - uid: 'excel!Excel.AutoFilter:interface'
    name: AutoFilter
    fullName: Excel.AutoFilter
  - uid: 'excel!Excel.ChartCollection:interface'
    name: ChartCollection
    fullName: Excel.ChartCollection
  - uid: 'excel!Excel.CommentCollection:interface'
    name: CommentCollection
    fullName: Excel.CommentCollection
  - uid: 'excel!Excel.Worksheet:interface'
    name: Worksheet
    fullName: Excel.Worksheet
  - uid: 'excel!Excel.Worksheet#copy~0:complex'
    name: |-
      | WorksheetPositionType
                      | "None"
                      | "Before"
                      | "After"
                      | "Beginning"
                      | "End"
    fullName: |-
      | Excel.WorksheetPositionType
                      | "None"
                      | "Before"
                      | "After"
                      | "Beginning"
                      | "End"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.WorksheetPositionType:enum'
        name: WorksheetPositionType
        fullName: Excel.WorksheetPositionType
      - name: |2-

                          | "None"
                          | "Before"
                          | "After"
                          | "Beginning"
                          | "End"
        fullName: |2-

                          | "None"
                          | "Before"
                          | "After"
                          | "Beginning"
                          | "End"
  - uid: 'excel!Excel.RangeAreas:interface'
    name: RangeAreas
    fullName: Excel.RangeAreas
  - uid: 'excel!Excel.WorksheetSearchCriteria:interface'
    name: WorksheetSearchCriteria
    fullName: Excel.WorksheetSearchCriteria
  - uid: 'excel!Excel.WorksheetFreezePanes:interface'
    name: WorksheetFreezePanes
    fullName: Excel.WorksheetFreezePanes
  - uid: 'excel!Excel.Range:interface'
    name: Range
    fullName: Excel.Range
  - uid: 'excel!Excel.PageBreakCollection:interface'
    name: PageBreakCollection
    fullName: Excel.PageBreakCollection
  - uid: 'excel!Excel.NamedItemCollection:interface'
    name: NamedItemCollection
    fullName: Excel.NamedItemCollection
  - uid: 'excel!Excel.PageLayout:interface'
    name: PageLayout
    fullName: Excel.PageLayout
  - uid: 'excel!Excel.PivotTableCollection:interface'
    name: PivotTableCollection
    fullName: Excel.PivotTableCollection
  - uid: 'excel!Excel.WorksheetProtection:interface'
    name: WorksheetProtection
    fullName: Excel.WorksheetProtection
  - uid: 'excel!Excel.Worksheet#replaceAll~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!Excel.ClientResult:interface'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: ReplaceCriteria
    fullName: Excel.ReplaceCriteria
  - uid: 'excel!Excel.ShapeCollection:interface'
    name: ShapeCollection
    fullName: Excel.ShapeCollection
  - uid: 'excel!Excel.SlicerCollection:interface'
    name: SlicerCollection
    fullName: Excel.SlicerCollection
  - uid: 'excel!Excel.TableCollection:interface'
    name: TableCollection
    fullName: Excel.TableCollection
  - uid: 'excel!Excel.Worksheet#visibility~0:complex'
    name: SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    fullName: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    spec.typeScript:
      - uid: 'excel!Excel.SheetVisibility:enum'
        name: SheetVisibility
        fullName: Excel.SheetVisibility
      - name: ' | "Visible" | "Hidden" | "VeryHidden"'
        fullName: ' | "Visible" | "Hidden" | "VeryHidden"'