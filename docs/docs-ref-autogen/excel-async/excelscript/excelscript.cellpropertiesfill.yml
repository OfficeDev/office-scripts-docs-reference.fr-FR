### YamlMime:TSType
name: Excel.CellPropertiesFill
uid: excel!Excel.CellPropertiesFill:interface
package: excel!
fullName: Excel.CellPropertiesFill
summary: Représente les `format.fill` propriétés d' `getCellProperties`<!-- -->, `getRowProperties`<!-- -->et `getColumnProperties` ou le `format.fill` paramètre d’entrée de `setCellProperties`<!-- -->, `setRowProperties`<!-- -->, et `setColumnProperties`<!-- -->.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: color
  uid: excel!Excel.CellPropertiesFill#color:member
  package: excel!
  fullName: color
  summary: Représente la `format.fill.color` propriété.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'color?: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Creating the SettableCellProperties objects to use for the range.\n    // In your add-in, these should be created once, outside the function.\n    let topHeaderProps: Excel.SettableCellProperties = {\n        // The style property takes a string matching the name of an Excel style.\n        // Built-in style names are listed in the `BuiltInStyle` enum.\n        // Note that a style will overwrite any formatting,\n        // so do not use the format property with the style property.\n        style: \"Heading1\"\n    };\n\n    let headerProps: Excel.SettableCellProperties = {\n        // Any subproperties of format that are not set will not be changed when these cell properties are set.\n        format: {\n            fill: {\n                color: \"Blue\"\n            },\n            font: {\n                color: \"White\",\n                bold: true\n            }\n        }\n    };\n\n    let nonApplicableProps: Excel.SettableCellProperties = {\n        format: {\n            fill: {\n                pattern: Excel.FillPattern.gray25\n            },\n            font: {\n                color: \"Gray\",\n                italic: true\n            }\n        }\n    };\n\n    let matchupScoreProps: Excel.SettableCellProperties = {\n        format: {\n            borders: {\n                bottom: {\n                    style: Excel.BorderLineStyle.continuous\n                },\n                left: {\n                    style: Excel.BorderLineStyle.continuous\n                },\n                right: {\n                    style: Excel.BorderLineStyle.continuous\n                },\n                top: {\n                    style: Excel.BorderLineStyle.continuous\n                }\n            }\n        }\n    };\n\n    let range = sheet.getRange(\"A1:E5\");\n\n    // You can use empty JSON objects to avoid changing a cell's properties.\n    range.setCellProperties([\n        [topHeaderProps, {}, {}, {}, {}],\n        [{}, {}, headerProps, headerProps, headerProps],\n        [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],\n        [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],\n        [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]\n    ]);\n\n    sheet.getUsedRange().format.autofitColumns();\n    await context.sync();\n}\n```"
- name: pattern
  uid: excel!Excel.CellPropertiesFill#pattern:member
  package: excel!
  fullName: pattern
  summary: Représente la `format.fill.pattern` propriété.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      pattern?:
                  | FillPattern
                  | "None"
                  | "Solid"
                  | "Gray50"
                  | "Gray75"
                  | "Gray25"
                  | "Horizontal"
                  | "Vertical"
                  | "Down"
                  | "Up"
                  | "Checker"
                  | "SemiGray75"
                  | "LightHorizontal"
                  | "LightVertical"
                  | "LightDown"
                  | "LightUp"
                  | "Grid"
                  | "CrissCross"
                  | "Gray16"
                  | "Gray8"
                  | "LinearGradient"
                  | "RectangularGradient";
    return:
      type: >-
        | <xref uid="excel!Excel.FillPattern:enum" />
                    | "None"
                    | "Solid"
                    | "Gray50"
                    | "Gray75"
                    | "Gray25"
                    | "Horizontal"
                    | "Vertical"
                    | "Down"
                    | "Up"
                    | "Checker"
                    | "SemiGray75"
                    | "LightHorizontal"
                    | "LightVertical"
                    | "LightDown"
                    | "LightUp"
                    | "Grid"
                    | "CrissCross"
                    | "Gray16"
                    | "Gray8"
                    | "LinearGradient"
                    | "RectangularGradient"
- name: patternColor
  uid: excel!Excel.CellPropertiesFill#patternColor:member
  package: excel!
  fullName: patternColor
  summary: Représente la `format.fill.patternColor` propriété.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'patternColor?: string;'
    return:
      type: string
- name: patternTintAndShade
  uid: excel!Excel.CellPropertiesFill#patternTintAndShade:member
  package: excel!
  fullName: patternTintAndShade
  summary: Représente la `format.fill.patternTintAndShade` propriété.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'patternTintAndShade?: number;'
    return:
      type: number
- name: tintAndShade
  uid: excel!Excel.CellPropertiesFill#tintAndShade:member
  package: excel!
  fullName: tintAndShade
  summary: Représente la `format.fill.tintAndShade` propriété.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'tintAndShade?: number;'
    return:
      type: number
metadata:
  ms.openlocfilehash: 9d2a3832fdb8e6b4b6faa92f34b6c655a370df36
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49413775"
