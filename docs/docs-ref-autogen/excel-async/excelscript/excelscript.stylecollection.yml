### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.StyleCollection:interface'
    summary: Représente une collection de tous les styles.
    name: Excel.StyleCollection
    fullName: Excel.StyleCollection
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.StyleCollection#add:member(1)'
      - 'excel!Excel.StyleCollection#getItem:member(1)'
      - 'excel!Excel.StyleCollection#load:member(1)'
  - uid: 'excel!Excel.StyleCollection#add:member(1)'
    summary: Ajoute un nouveau style à la collection.
    name: add(name)
    fullName: add(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(name: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let styles = context.workbook.styles;

              // Add a new style to the style collection.
              // Styles is in the Home tab ribbon.
              styles.add("Diagonal Orientation Style");
                    
              let newStyle = styles.getItem("Diagonal Orientation Style");
              
              // The "Diagonal Orientation Style" properties.
              newStyle.textOrientation = 38;
              newStyle.autoIndent = true;
              newStyle.includeProtection = true;
              newStyle.shrinkToFit = true;
              newStyle.locked = false;
              
              await context.sync();

              console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
          }
          ```
      parameters:
        - id: name
          description: Nom du style à ajouter.
          type:
            - string
  - uid: 'excel!Excel.StyleCollection#getItem:member(1)'
    summary: Obtient un style par nom.
    name: getItem(name)
    fullName: getItem(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(name: string): Style;'
      return:
        type:
          - 'excel!Excel.Style:interface'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let styles = context.workbook.styles;

              // Add a new style to the style collection.
              // Styles is in the Home tab ribbon.
              styles.add("Diagonal Orientation Style");
                    
              let newStyle = styles.getItem("Diagonal Orientation Style");
              
              // The "Diagonal Orientation Style" properties.
              newStyle.textOrientation = 38;
              newStyle.autoIndent = true;
              newStyle.includeProtection = true;
              newStyle.shrinkToFit = true;
              newStyle.locked = false;
              
              await context.sync();

              console.log("Successfully added a new style with diagonal orientation to the Home tab ribbon.");
          }
          ```
      parameters:
        - id: name
          description: Nom du style à récupérer.
          type:
            - string
  - uid: 'excel!Excel.StyleCollection#load:member(1)'
    summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez appeler `context.sync()` avant de lire les propriétés.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.
          type:
            - 'string | string[]'
references:
  - uid: 'excel!Excel.Style:interface'
    name: Style
    fullName: Excel.Style