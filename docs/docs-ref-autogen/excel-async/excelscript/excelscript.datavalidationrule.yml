### YamlMime:TSType
name: Excel.DataValidationRule
uid: excel!Excel.DataValidationRule:interface
package: excel!
fullName: Excel.DataValidationRule
summary: La règle de validation des données contient différents types de validation des données. Vous ne pouvez utiliser qu’un seul de ces éléments à la fois conformément à Excel. DataValidationType.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: custom
  uid: excel!Excel.DataValidationRule#custom:member
  package: excel!
  fullName: custom
  summary: Critères de validation des données personnalisés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'custom?: CustomDataValidation;'
    return:
      type: <xref uid="excel!Excel.CustomDataValidation:interface" />
- name: date
  uid: excel!Excel.DataValidationRule#date:member
  package: excel!
  fullName: date
  summary: Critères de validation des données de date.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'date?: DateTimeDataValidation;'
    return:
      type: <xref uid="excel!Excel.DateTimeDataValidation:interface" />
- name: decimal
  uid: excel!Excel.DataValidationRule#decimal:member
  package: excel!
  fullName: decimal
  summary: Critères de validation des données décimales.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'decimal?: BasicDataValidation;'
    return:
      type: <xref uid="excel!Excel.BasicDataValidation:interface" />
- name: list
  uid: excel!Excel.DataValidationRule#list:member
  package: excel!
  fullName: list
  summary: Critères de validation des données de liste.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'list?: ListDataValidation;'
    return:
      type: <xref uid="excel!Excel.ListDataValidation:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Decision\");\n    let nameRange = \n        sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Baby Name\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    nameRange.dataValidation.clear();\n\n    let nameSourceRange = context.workbook.worksheets.getItem(\"Names\").getRange(\"A1:A3\");\n\n    let approvedListRule = {\n        list: {\n            inCellDropDown: true,\n            source: nameSourceRange\n        }\n    };\n    nameRange.dataValidation.rule = approvedListRule;\n\n    await context.sync();\n}\n```"
- name: textLength
  uid: excel!Excel.DataValidationRule#textLength:member
  package: excel!
  fullName: textLength
  summary: Critères de validation des données textLength.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'textLength?: BasicDataValidation;'
    return:
      type: <xref uid="excel!Excel.BasicDataValidation:interface" />
- name: time
  uid: excel!Excel.DataValidationRule#time:member
  package: excel!
  fullName: time
  summary: Critères de validation des données de temps.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'time?: DateTimeDataValidation;'
    return:
      type: <xref uid="excel!Excel.DateTimeDataValidation:interface" />
- name: wholeNumber
  uid: excel!Excel.DataValidationRule#wholeNumber:member
  package: excel!
  fullName: wholeNumber
  summary: Critères de validation des données WholeNumber.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'wholeNumber?: BasicDataValidation;'
    return:
      type: <xref uid="excel!Excel.BasicDataValidation:interface" />
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Decision\");\n    let rankingRange = sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Ranking\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    rankingRange.dataValidation.clear();\n\n    let greaterThanZeroRule = {\n        wholeNumber: {\n            formula1: 0,\n            operator: Excel.DataValidationOperator.greaterThan\n        }\n    };\n    rankingRange.dataValidation.rule = greaterThanZeroRule;\n\n    rankingRange.dataValidation.prompt = {\n        message: \"Please enter a positive number.\",\n        showPrompt: true,\n        title: \"Positive numbers only.\"\n    };\n\n    rankingRange.dataValidation.errorAlert = {\n        message: \"Sorry, only positive numbers are allowed\",\n        showAlert: true,\n        style: \"Stop\",\n        title: \"Negative Number Entered\"\n    };\n\n    await context.sync();\n}\n```"
metadata:
  ms.openlocfilehash: 7a37c87714c50256865f6f962174c807f5faa364
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49414005"
