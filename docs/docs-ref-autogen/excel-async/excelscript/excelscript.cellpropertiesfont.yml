### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CellPropertiesFont:interface'
    summary: 'Représente les `format.font` propriétés d''`getCellProperties`<!-- -->, `getRowProperties`<!-- -->et `getColumnProperties` ou le `format.font` paramètre d’entrée de`setCellProperties`<!-- -->, `setRowProperties`<!-- -->, et`setColumnProperties`<!-- -->.'
    name: Excel.CellPropertiesFont
    fullName: Excel.CellPropertiesFont
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.CellPropertiesFont#bold:member'
      - 'excel!Excel.CellPropertiesFont#color:member'
      - 'excel!Excel.CellPropertiesFont#italic:member'
      - 'excel!Excel.CellPropertiesFont#name:member'
      - 'excel!Excel.CellPropertiesFont#size:member'
      - 'excel!Excel.CellPropertiesFont#strikethrough:member'
      - 'excel!Excel.CellPropertiesFont#subscript:member'
      - 'excel!Excel.CellPropertiesFont#superscript:member'
      - 'excel!Excel.CellPropertiesFont#tintAndShade:member'
      - 'excel!Excel.CellPropertiesFont#underline:member'
  - uid: 'excel!Excel.CellPropertiesFont#bold:member'
    summary: Représente la `format.font.bold` propriété.
    name: bold
    fullName: bold
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bold?: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.CellPropertiesFont#color:member'
    summary: Représente la `format.font.color` propriété.
    name: color
    fullName: color
    langs:
      - typeScript
    type: property
    syntax:
      content: 'color?: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getActiveWorksheet();

              // Creating the SettableCellProperties objects to use for the range.
              // In your add-in, these should be created once, outside the function.
              let topHeaderProps: Excel.SettableCellProperties = {
                  // The style property takes a string matching the name of an Excel style.
                  // Built-in style names are listed in the `BuiltInStyle` enum.
                  // Note that a style will overwrite any formatting,
                  // so do not use the format property with the style property.
                  style: "Heading1"
              };

              let headerProps: Excel.SettableCellProperties = {
                  // Any subproperties of format that are not set will not be changed when these cell properties are set.
                  format: {
                      fill: {
                          color: "Blue"
                      },
                      font: {
                          color: "White",
                          bold: true
                      }
                  }
              };

              let nonApplicableProps: Excel.SettableCellProperties = {
                  format: {
                      fill: {
                          pattern: Excel.FillPattern.gray25
                      },
                      font: {
                          color: "Gray",
                          italic: true
                      }
                  }
              };

              let matchupScoreProps: Excel.SettableCellProperties = {
                  format: {
                      borders: {
                          bottom: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          left: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          right: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          top: {
                              style: Excel.BorderLineStyle.continuous
                          }
                      }
                  }
              };

              let range = sheet.getRange("A1:E5");

              // You can use empty JSON objects to avoid changing a cell's properties.
              range.setCellProperties([
                  [topHeaderProps, {}, {}, {}, {}],
                  [{}, {}, headerProps, headerProps, headerProps],
                  [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
              ]);

              sheet.getUsedRange().format.autofitColumns();
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.CellPropertiesFont#italic:member'
    summary: Représente la `format.font.italic` propriété.
    name: italic
    fullName: italic
    langs:
      - typeScript
    type: property
    syntax:
      content: 'italic?: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.CellPropertiesFont#name:member'
    summary: Représente la `format.font.name` propriété.
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name?: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.CellPropertiesFont#size:member'
    summary: Représente la `format.font.size` propriété.
    name: size
    fullName: size
    langs:
      - typeScript
    type: property
    syntax:
      content: 'size?: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.CellPropertiesFont#strikethrough:member'
    summary: Représente la `format.font.strikethrough` propriété.
    name: strikethrough
    fullName: strikethrough
    langs:
      - typeScript
    type: property
    syntax:
      content: 'strikethrough?: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.CellPropertiesFont#subscript:member'
    summary: Représente la `format.font.subscript` propriété.
    name: subscript
    fullName: subscript
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subscript?: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.CellPropertiesFont#superscript:member'
    summary: Représente la `format.font.superscript` propriété.
    name: superscript
    fullName: superscript
    langs:
      - typeScript
    type: property
    syntax:
      content: 'superscript?: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.CellPropertiesFont#tintAndShade:member'
    summary: Représente la `format.font.tintAndShade` propriété.
    name: tintAndShade
    fullName: tintAndShade
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tintAndShade?: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.CellPropertiesFont#underline:member'
    summary: Représente la `format.font.underline` propriété.
    name: underline
    fullName: underline
    langs:
      - typeScript
    type: property
    syntax:
      content: |-
        underline?:
                    | RangeUnderlineStyle
                    | "None"
                    | "Single"
                    | "Double"
                    | "SingleAccountant"
                    | "DoubleAccountant";
      return:
        type:
          - 'excel!Excel.CellPropertiesFont#underline~0:complex'
references:
  - uid: 'excel!Excel.CellPropertiesFont#underline~0:complex'
    name: |-
      | RangeUnderlineStyle
                  | "None"
                  | "Single"
                  | "Double"
                  | "SingleAccountant"
                  | "DoubleAccountant"
    fullName: |-
      | Excel.RangeUnderlineStyle
                  | "None"
                  | "Single"
                  | "Double"
                  | "SingleAccountant"
                  | "DoubleAccountant"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.RangeUnderlineStyle:enum'
        name: RangeUnderlineStyle
        fullName: Excel.RangeUnderlineStyle
      - name: |2-

                      | "None"
                      | "Single"
                      | "Double"
                      | "SingleAccountant"
                      | "DoubleAccountant"
        fullName: |2-

                      | "None"
                      | "Single"
                      | "Double"
                      | "SingleAccountant"
                      | "DoubleAccountant"